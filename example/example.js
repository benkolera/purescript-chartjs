// Generated by psc version 0.6.1.1
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    var Unit = {
        create: function (value) {
            return value;
        }
    };
    function LT() {

    };
    LT.value = new LT();
    function GT() {

    };
    GT.value = new GT();
    function EQ() {

    };
    EQ.value = new EQ();
    function Semigroupoid($less$less$less) {
        this["<<<"] = $less$less$less;
    };
    function Category(__superclass_Prelude$dotSemigroupoid_0, id) {
        this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
        this.id = id;
    };
    function Show(show) {
        this.show = show;
    };
    function Functor($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    function Apply($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    function Applicative(__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    function Bind($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    function Monad(__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    function Num($percent, $times, $plus, $minus, $div, negate) {
        this["%"] = $percent;
        this["*"] = $times;
        this["+"] = $plus;
        this["-"] = $minus;
        this["/"] = $div;
        this.negate = negate;
    };
    function Eq($div$eq, $eq$eq) {
        this["/="] = $div$eq;
        this["=="] = $eq$eq;
    };
    function Ord(__superclass_Prelude$dotEq_0, compare) {
        this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
        this.compare = compare;
    };
    function Bits($dot$amp$dot, $dot$up$dot, $dot$bar$dot, complement, shl, shr, zshr) {
        this[".&."] = $dot$amp$dot;
        this[".^."] = $dot$up$dot;
        this[".|."] = $dot$bar$dot;
        this.complement = complement;
        this.shl = shl;
        this.shr = shr;
        this.zshr = zshr;
    };
    function BoolLike($amp$amp, not, $bar$bar) {
        this["&&"] = $amp$amp;
        this.not = not;
        this["||"] = $bar$bar;
    };
    function Semigroup($less$greater) {
        this["<>"] = $less$greater;
    };
    function cons(e) {  return function(l) {    return [e].concat(l);  };};
    function showStringImpl(s) {  return JSON.stringify(s);};
    function showNumberImpl(n) {  return n.toString();};
    function showArrayImpl(f) {  return function(xs) {    var ss = [];    for (var i = 0, l = xs.length; i < l; i++) {      ss[i] = f(xs[i]);    }    return '[' + ss.join(',') + ']';  };};
    function numAdd(n1) {  return function(n2) {    return n1 + n2;  };};
    function numSub(n1) {  return function(n2) {    return n1 - n2;  };};
    function numMul(n1) {  return function(n2) {    return n1 * n2;  };};
    function numDiv(n1) {  return function(n2) {    return n1 / n2;  };};
    function numMod(n1) {  return function(n2) {    return n1 % n2;  };};
    function numNegate(n) {  return -n;};
    function refEq(r1) {  return function(r2) {    return r1 === r2;  };};
    function refIneq(r1) {  return function(r2) {    return r1 !== r2;  };};
    function eqArrayImpl(f) {  return function(xs) {    return function(ys) {      if (xs.length !== ys.length) return false;      for (var i = 0; i < xs.length; i++) {        if (!f(xs[i])(ys[i])) return false;      }      return true;    };  };};
    function unsafeCompareImpl(lt) {  return function(eq) {    return function(gt) {      return function(x) {        return function(y) {          return x < y ? lt : x > y ? gt : eq;        };      };    };  };};
    function numShl(n1) {  return function(n2) {    return n1 << n2;  };};
    function numShr(n1) {  return function(n2) {    return n1 >> n2;  };};
    function numZshr(n1) {  return function(n2) {    return n1 >>> n2;  };};
    function numAnd(n1) {  return function(n2) {    return n1 & n2;  };};
    function numOr(n1) {  return function(n2) {    return n1 | n2;  };};
    function numXor(n1) {  return function(n2) {    return n1 ^ n2;  };};
    function numComplement(n) {  return ~n;};
    function boolAnd(b1) {  return function(b2) {    return b1 && b2;  };};
    function boolOr(b1) {  return function(b2) {    return b1 || b2;  };};
    function boolNot(b) {  return !b;};
    function concatString(s1) {  return function(s2) {    return s1 + s2;  };};
    var $bar$bar = function (dict) {
        return dict["||"];
    };
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $eq$eq = function (dict) {
        return dict["=="];
    };
    var $less$greater = function (dict) {
        return dict["<>"];
    };
    var $less$less$less = function (dict) {
        return dict["<<<"];
    };
    var $greater$greater$greater = function (__dict_Semigroupoid_0) {
        return function (f) {
            return function (g) {
                return $less$less$less(__dict_Semigroupoid_0)(g)(f);
            };
        };
    };
    var $less$times$greater = function (dict) {
        return dict["<*>"];
    };
    var $less$dollar$greater = function (dict) {
        return dict["<$>"];
    };
    var $less$hash$greater = function (__dict_Functor_1) {
        return function (fa) {
            return function (f) {
                return $less$dollar$greater(__dict_Functor_1)(f)(fa);
            };
        };
    };
    var $colon = cons;
    var $div$eq = function (dict) {
        return dict["/="];
    };
    var $div = function (dict) {
        return dict["/"];
    };
    var $dot$bar$dot = function (dict) {
        return dict[".|."];
    };
    var $dot$up$dot = function (dict) {
        return dict[".^."];
    };
    var $dot$amp$dot = function (dict) {
        return dict[".&."];
    };
    var $minus = function (dict) {
        return dict["-"];
    };
    var $plus$plus = function (__dict_Semigroup_2) {
        return $less$greater(__dict_Semigroup_2);
    };
    var $plus = function (dict) {
        return dict["+"];
    };
    var $times = function (dict) {
        return dict["*"];
    };
    var $amp$amp = function (dict) {
        return dict["&&"];
    };
    var $percent = function (dict) {
        return dict["%"];
    };
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    var $hash = function (x) {
        return function (f) {
            return f(x);
        };
    };
    var zshr = function (dict) {
        return dict.zshr;
    };
    var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
    var unit = {};
    var shr = function (dict) {
        return dict.shr;
    };
    var showUnit = new Show(function (_21) {
        return "Unit {}";
    });
    var showString = new Show(showStringImpl);
    var showOrdering = new Show(function (_29) {
        if (_29 instanceof LT) {
            return "LT";
        };
        if (_29 instanceof GT) {
            return "GT";
        };
        if (_29 instanceof EQ) {
            return "EQ";
        };
        throw new Error("Failed pattern match");
    });
    var showNumber = new Show(showNumberImpl);
    var showBoolean = new Show(function (_22) {
        if (_22) {
            return "true";
        };
        if (!_22) {
            return "false";
        };
        throw new Error("Failed pattern match");
    });
    var show = function (dict) {
        return dict.show;
    };
    var showArray = function (__dict_Show_3) {
        return new Show(showArrayImpl(show(__dict_Show_3)));
    };
    var shl = function (dict) {
        return dict.shl;
    };
    var semigroupoidArr = new Semigroupoid(function (f) {
        return function (g) {
            return function (x) {
                return f(g(x));
            };
        };
    });
    var semigroupUnit = new Semigroup(function (_36) {
        return function (_37) {
            return {};
        };
    });
    var semigroupString = new Semigroup(concatString);
    var semigroupArr = function (__dict_Semigroup_4) {
        return new Semigroup(function (f) {
            return function (g) {
                return function (x) {
                    return $less$greater(__dict_Semigroup_4)(f(x))(g(x));
                };
            };
        });
    };
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_5) {
        return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
    };
    var otherwise = true;
    var numNumber = new Num(numMod, numMul, numAdd, numSub, numDiv, numNegate);
    var not = function (dict) {
        return dict.not;
    };
    var negate = function (dict) {
        return dict.negate;
    };
    var liftM1 = function (__dict_Monad_6) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_6["__superclass_Prelude.Bind_1"]())(a)(function (_0) {
                    return $$return(__dict_Monad_6)(f(_0));
                });
            };
        };
    };
    var liftA1 = function (__dict_Applicative_7) {
        return function (f) {
            return function (a) {
                return $less$times$greater(__dict_Applicative_7["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_7)(f))(a);
            };
        };
    };
    var id = function (dict) {
        return dict.id;
    };
    var functorArr = new Functor($less$less$less(semigroupoidArr));
    var flip = function (f) {
        return function (b) {
            return function (a) {
                return f(a)(b);
            };
        };
    };
    var eqUnit = new Eq(function (_25) {
        return function (_26) {
            return false;
        };
    }, function (_23) {
        return function (_24) {
            return true;
        };
    });
    var ordUnit = new Ord(function () {
        return eqUnit;
    }, function (_30) {
        return function (_31) {
            return EQ.value;
        };
    });
    var eqString = new Eq(refIneq, refEq);
    var ordString = new Ord(function () {
        return eqString;
    }, unsafeCompare);
    var eqNumber = new Eq(refIneq, refEq);
    var ordNumber = new Ord(function () {
        return eqNumber;
    }, unsafeCompare);
    var eqBoolean = new Eq(refIneq, refEq);
    var ordBoolean = new Ord(function () {
        return eqBoolean;
    }, function (_32) {
        return function (_33) {
            if (!_32 && !_33) {
                return EQ.value;
            };
            if (!_32 && _33) {
                return LT.value;
            };
            if (_32 && _33) {
                return EQ.value;
            };
            if (_32 && !_33) {
                return GT.value;
            };
            throw new Error("Failed pattern match");
        };
    });
    var $$const = function (_17) {
        return function (_18) {
            return _17;
        };
    };
    var $$void = function (__dict_Functor_9) {
        return function (fa) {
            return $less$dollar$greater(__dict_Functor_9)($$const(unit))(fa);
        };
    };
    var complement = function (dict) {
        return dict.complement;
    };
    var compare = function (dict) {
        return dict.compare;
    };
    var $less = function (__dict_Ord_11) {
        return function (a1) {
            return function (a2) {
                var _293 = compare(__dict_Ord_11)(a1)(a2);
                if (_293 instanceof LT) {
                    return true;
                };
                return false;
            };
        };
    };
    var $less$eq = function (__dict_Ord_12) {
        return function (a1) {
            return function (a2) {
                var _294 = compare(__dict_Ord_12)(a1)(a2);
                if (_294 instanceof GT) {
                    return false;
                };
                return true;
            };
        };
    };
    var $greater = function (__dict_Ord_13) {
        return function (a1) {
            return function (a2) {
                var _295 = compare(__dict_Ord_13)(a1)(a2);
                if (_295 instanceof GT) {
                    return true;
                };
                return false;
            };
        };
    };
    var $greater$eq = function (__dict_Ord_14) {
        return function (a1) {
            return function (a2) {
                var _296 = compare(__dict_Ord_14)(a1)(a2);
                if (_296 instanceof LT) {
                    return false;
                };
                return true;
            };
        };
    };
    var categoryArr = new Category(function () {
        return semigroupoidArr;
    }, function (x) {
        return x;
    });
    var boolLikeBoolean = new BoolLike(boolAnd, boolNot, boolOr);
    var eqArray = function (__dict_Eq_8) {
        return new Eq(function (xs) {
            return function (ys) {
                return not(boolLikeBoolean)($eq$eq(eqArray(__dict_Eq_8))(xs)(ys));
            };
        }, function (xs) {
            return function (ys) {
                return eqArrayImpl($eq$eq(__dict_Eq_8))(xs)(ys);
            };
        });
    };
    var ordArray = function (__dict_Ord_10) {
        return new Ord(function () {
            return eqArray(__dict_Ord_10["__superclass_Prelude.Eq_0"]());
        }, function (_34) {
            return function (_35) {
                if (_34.length === 0 && _35.length === 0) {
                    return EQ.value;
                };
                if (_34.length === 0) {
                    return LT.value;
                };
                if (_35.length === 0) {
                    return GT.value;
                };
                if (_34.length >= 1) {
                    var _303 = _34.slice(1);
                    if (_35.length >= 1) {
                        var _301 = _35.slice(1);
                        var _299 = compare(__dict_Ord_10)(_34[0])(_35[0]);
                        if (_299 instanceof EQ) {
                            return compare(ordArray(__dict_Ord_10))(_303)(_301);
                        };
                        return _299;
                    };
                };
                throw new Error("Failed pattern match");
            };
        });
    };
    var eqOrdering = new Eq(function (x) {
        return function (y) {
            return not(boolLikeBoolean)($eq$eq(eqOrdering)(x)(y));
        };
    }, function (_27) {
        return function (_28) {
            if (_27 instanceof LT && _28 instanceof LT) {
                return true;
            };
            if (_27 instanceof GT && _28 instanceof GT) {
                return true;
            };
            if (_27 instanceof EQ && _28 instanceof EQ) {
                return true;
            };
            return false;
        };
    });
    var bitsNumber = new Bits(numAnd, numXor, numOr, numComplement, numShl, numShr, numZshr);
    var asTypeOf = function (_19) {
        return function (_20) {
            return _19;
        };
    };
    var applyArr = new Apply(function (f) {
        return function (g) {
            return function (x) {
                return f(x)(g(x));
            };
        };
    }, function () {
        return functorArr;
    });
    var bindArr = new Bind(function (m) {
        return function (f) {
            return function (x) {
                return f(m(x))(x);
            };
        };
    }, function () {
        return applyArr;
    });
    var applicativeArr = new Applicative(function () {
        return applyArr;
    }, $$const);
    var monadArr = new Monad(function () {
        return applicativeArr;
    }, function () {
        return bindArr;
    });
    var ap = function (__dict_Monad_15) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_15["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                    return $greater$greater$eq(__dict_Monad_15["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                        return $$return(__dict_Monad_15)(_2(_1));
                    });
                });
            };
        };
    };
    return {
        "#": $hash, 
        "$": $dollar, 
        "%": $percent, 
        "&&": $amp$amp, 
        "*": $times, 
        "+": $plus, 
        "++": $plus$plus, 
        "-": $minus, 
        ".&.": $dot$amp$dot, 
        ".^.": $dot$up$dot, 
        ".|.": $dot$bar$dot, 
        "/": $div, 
        "/=": $div$eq, 
        ":": $colon, 
        "<": $less, 
        "<#>": $less$hash$greater, 
        "<$>": $less$dollar$greater, 
        "<*>": $less$times$greater, 
        "<<<": $less$less$less, 
        "<=": $less$eq, 
        "<>": $less$greater, 
        "==": $eq$eq, 
        ">": $greater, 
        ">=": $greater$eq, 
        ">>=": $greater$greater$eq, 
        ">>>": $greater$greater$greater, 
        Applicative: Applicative, 
        Apply: Apply, 
        Bind: Bind, 
        Bits: Bits, 
        BoolLike: BoolLike, 
        Category: Category, 
        EQ: EQ, 
        Eq: Eq, 
        Functor: Functor, 
        GT: GT, 
        LT: LT, 
        Monad: Monad, 
        Num: Num, 
        Ord: Ord, 
        Semigroup: Semigroup, 
        Semigroupoid: Semigroupoid, 
        Show: Show, 
        Unit: Unit, 
        ap: ap, 
        applicativeArr: applicativeArr, 
        applyArr: applyArr, 
        asTypeOf: asTypeOf, 
        bindArr: bindArr, 
        bitsNumber: bitsNumber, 
        boolLikeBoolean: boolLikeBoolean, 
        categoryArr: categoryArr, 
        compare: compare, 
        complement: complement, 
        cons: cons, 
        "const": $$const, 
        eqArray: eqArray, 
        eqBoolean: eqBoolean, 
        eqNumber: eqNumber, 
        eqOrdering: eqOrdering, 
        eqString: eqString, 
        eqUnit: eqUnit, 
        flip: flip, 
        functorArr: functorArr, 
        id: id, 
        liftA1: liftA1, 
        liftM1: liftM1, 
        monadArr: monadArr, 
        negate: negate, 
        not: not, 
        numNumber: numNumber, 
        ordArray: ordArray, 
        ordBoolean: ordBoolean, 
        ordNumber: ordNumber, 
        ordString: ordString, 
        ordUnit: ordUnit, 
        otherwise: otherwise, 
        pure: pure, 
        refEq: refEq, 
        refIneq: refIneq, 
        "return": $$return, 
        semigroupArr: semigroupArr, 
        semigroupString: semigroupString, 
        semigroupUnit: semigroupUnit, 
        semigroupoidArr: semigroupoidArr, 
        shl: shl, 
        show: show, 
        showArray: showArray, 
        showBoolean: showBoolean, 
        showNumber: showNumber, 
        showOrdering: showOrdering, 
        showString: showString, 
        showUnit: showUnit, 
        shr: shr, 
        unit: unit, 
        "void": $$void, 
        zshr: zshr, 
        "||": $bar$bar
    };
})();
var PS = PS || {};
PS.Prelude_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function unsafeIndex(xs) {  return function(n) {    return xs[n];  };};
    return {
        unsafeIndex: unsafeIndex
    };
})();
var PS = PS || {};
PS.Data_Function = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function mkFn0(fn) {  return function() {    return fn({});  };};
    function mkFn1(fn) {  return function(a) {    return fn(a);  };};
    function mkFn2(fn) {  return function(a, b) {    return fn(a)(b);  };};
    function mkFn3(fn) {  return function(a, b, c) {    return fn(a)(b)(c);  };};
    function mkFn4(fn) {  return function(a, b, c, d) {    return fn(a)(b)(c)(d);  };};
    function mkFn5(fn) {  return function(a, b, c, d, e) {    return fn(a)(b)(c)(d)(e);  };};
    function mkFn6(fn) {  return function(a, b, c, d, e, f) {    return fn(a)(b)(c)(d)(e)(f);  };};
    function mkFn7(fn) {  return function(a, b, c, d, e, f, g) {    return fn(a)(b)(c)(d)(e)(f)(g);  };};
    function mkFn8(fn) {  return function(a, b, c, d, e, f, g, h) {    return fn(a)(b)(c)(d)(e)(f)(g)(h);  };};
    function mkFn9(fn) {  return function(a, b, c, d, e, f, g, h, i) {    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);  };};
    function mkFn10(fn) {  return function(a, b, c, d, e, f, g, h, i, j) {    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);  };};
    function runFn0(fn) {  return fn();};
    function runFn1(fn) {  return function(a) {    return fn(a);  };};
    function runFn2(fn) {  return function(a) {    return function(b) {      return fn(a, b);    };  };};
    function runFn3(fn) {  return function(a) {    return function(b) {      return function(c) {        return fn(a, b, c);      };    };  };};
    function runFn4(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return fn(a, b, c, d);        };      };    };  };};
    function runFn5(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return fn(a, b, c, d, e);          };        };      };    };  };};
    function runFn6(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return fn(a, b, c, d, e, f);            };          };        };      };    };  };};
    function runFn7(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return fn(a, b, c, d, e, f, g);              };            };          };        };      };    };  };};
    function runFn8(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return function(h) {                  return fn(a, b, c, d, e, f, g, h);                };              };            };          };        };      };    };  };};
    function runFn9(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return function(h) {                  return function(i) {                    return fn(a, b, c, d, e, f, g, h, i);                  };                };              };            };          };        };      };    };  };};
    function runFn10(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return function(h) {                  return function(i) {                    return function(j) {                      return fn(a, b, c, d, e, f, g, h, i, j);                    };                  };                };              };            };          };        };      };    };  };};
    var on = function (f) {
        return function (g) {
            return function (x) {
                return function (y) {
                    return f(g(x))(g(y));
                };
            };
        };
    };
    return {
        mkFn0: mkFn0, 
        mkFn1: mkFn1, 
        mkFn10: mkFn10, 
        mkFn2: mkFn2, 
        mkFn3: mkFn3, 
        mkFn4: mkFn4, 
        mkFn5: mkFn5, 
        mkFn6: mkFn6, 
        mkFn7: mkFn7, 
        mkFn8: mkFn8, 
        mkFn9: mkFn9, 
        on: on, 
        runFn0: runFn0, 
        runFn1: runFn1, 
        runFn10: runFn10, 
        runFn2: runFn2, 
        runFn3: runFn3, 
        runFn4: runFn4, 
        runFn5: runFn5, 
        runFn6: runFn6, 
        runFn7: runFn7, 
        runFn8: runFn8, 
        runFn9: runFn9
    };
})();
var PS = PS || {};
PS.Data_Eq = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Ref = {
        create: function (value) {
            return value;
        }
    };
    var liftRef = function (_38) {
        return function (_39) {
            return function (_40) {
                return _38(_39)(_40);
            };
        };
    };
    var functorRef = new Prelude.Functor(function (_41) {
        return function (_42) {
            return _41(_42);
        };
    });
    var eqRef = new Prelude.Eq(liftRef(Prelude.refIneq), liftRef(Prelude.refEq));
    return {
        Ref: Ref, 
        eqRef: eqRef, 
        functorRef: functorRef, 
        liftRef: liftRef
    };
})();
var PS = PS || {};
PS.DOM = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    return {};
})();
var PS = PS || {};
PS.Control_Monad_Eff = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function returnE(a) {  return function() {    return a;  };};
    function bindE(a) {  return function(f) {    return function() {      return f(a())();    };  };};
    function runPure(f) {  return f();};
    function untilE(f) {  return function() {    while (!f());    return {};  };};
    function whileE(f) {  return function(a) {    return function() {      while (f()) {        a();      }      return {};    };  };};
    function forE(lo) {  return function(hi) {    return function(f) {      return function() {        for (var i = lo; i < hi; i++) {          f(i)();        }      };    };  };};
    function foreachE(as) {  return function(f) {    return function() {      for (var i = 0; i < as.length; i++) {        f(as[i])();      }    };  };};
    var monadEff = new Prelude.Monad(function () {
        return applicativeEff;
    }, function () {
        return bindEff;
    });
    var bindEff = new Prelude.Bind(bindE, function () {
        return applyEff;
    });
    var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
        return functorEff;
    });
    var applicativeEff = new Prelude.Applicative(function () {
        return applyEff;
    }, returnE);
    var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
    return {
        applicativeEff: applicativeEff, 
        applyEff: applyEff, 
        bindE: bindE, 
        bindEff: bindEff, 
        forE: forE, 
        foreachE: foreachE, 
        functorEff: functorEff, 
        monadEff: monadEff, 
        returnE: returnE, 
        runPure: runPure, 
        untilE: untilE, 
        whileE: whileE
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff_Exception = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
  function showErrorImpl(err) {
    return err.stack || err.toString();
  }
  ;
    
  function error(msg) {
    return new Error(msg);
  }
  ;
    
  function message(e) {
    return e.message;
  }
  ;
    
  function throwException(e) {
    return function() {
      throw e;
    };
  }
  ;
    
  function catchException(c) {
    return function(t) {
      return function() {
        try {
          return t();
        } catch(e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === '[object Error]') {
            return c(e)();
          } else {
            return c(new Error(e.toString()))();
          }
        }
      };
    };
  }
  ;
    var showError = new Prelude.Show(showErrorImpl);
    return {
        catchException: catchException, 
        error: error, 
        message: message, 
        showError: showError, 
        showErrorImpl: showErrorImpl, 
        throwException: throwException
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff_Random = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function random() {  return Math.random();};
    return {
        random: random
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function unsafeInterleaveEff(f) {  return f;};
    return {
        unsafeInterleaveEff: unsafeInterleaveEff
    };
})();
var PS = PS || {};
PS.Control_Monad_ST = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function newSTRef(val) {  return function() {    return { value: val };  };};
    function readSTRef(ref) {  return function() {    return ref.value;  };};
    function modifySTRef(ref) {  return function(f) {    return function() {      return ref.value = f(ref.value);    };  };};
    function writeSTRef(ref) {  return function(a) {    return function() {      return ref.value = a;    };  };};
    function newSTArray(len) {  return function(a) {    return function() {      var arr = [];      for (var i = 0; i < len; i++) {        arr[i] = a;      };      return arr;    };  };};
    function peekSTArray(arr) {  return function(i) {    return function() {      return arr[i];    };  };};
    function pokeSTArray(arr) {  return function(i) {    return function(a) {      return function() {        return arr[i] = a;      };    };  };};
    function runST(f) {  return f;};
    function runSTArray(f) {  return f;};
    return {
        modifySTRef: modifySTRef, 
        newSTArray: newSTArray, 
        newSTRef: newSTRef, 
        peekSTArray: peekSTArray, 
        pokeSTArray: pokeSTArray, 
        readSTRef: readSTRef, 
        runST: runST, 
        runSTArray: runSTArray, 
        writeSTRef: writeSTRef
    };
})();
var PS = PS || {};
PS.Debug_Trace = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function trace(s) {  return function() {    console.log(s);    return {};  };};
    var print = function (__dict_Show_16) {
        return function (o) {
            return trace(Prelude.show(__dict_Show_16)(o));
        };
    };
    return {
        print: print, 
        trace: trace
    };
})();
var PS = PS || {};
PS.Control_Monad = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var when = function (__dict_Monad_17) {
        return function (_48) {
            return function (_49) {
                if (_48) {
                    return _49;
                };
                if (!_48) {
                    return Prelude["return"](__dict_Monad_17)(Prelude.unit);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var unless = function (__dict_Monad_18) {
        return function (_50) {
            return function (_51) {
                if (!_50) {
                    return _51;
                };
                if (_50) {
                    return Prelude["return"](__dict_Monad_18)(Prelude.unit);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var replicateM = function (__dict_Monad_19) {
        return function (_43) {
            return function (_44) {
                if (_43 === 0) {
                    return Prelude["return"](__dict_Monad_19)([  ]);
                };
                return Prelude[">>="](__dict_Monad_19["__superclass_Prelude.Bind_1"]())(_44)(function (_4) {
                    return Prelude[">>="](__dict_Monad_19["__superclass_Prelude.Bind_1"]())(replicateM(__dict_Monad_19)(_43 - 1)(_44))(function (_3) {
                        return Prelude["return"](__dict_Monad_19)(Prelude[":"](_4)(_3));
                    });
                });
            };
        };
    };
    var foldM = function (__dict_Monad_20) {
        return function (_45) {
            return function (_46) {
                return function (_47) {
                    if (_47.length === 0) {
                        return Prelude["return"](__dict_Monad_20)(_46);
                    };
                    if (_47.length >= 1) {
                        var _327 = _47.slice(1);
                        return Prelude[">>="](__dict_Monad_20["__superclass_Prelude.Bind_1"]())(_45(_46)(_47[0]))(function (a$prime) {
                            return foldM(__dict_Monad_20)(_45)(a$prime)(_327);
                        });
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
    return {
        foldM: foldM, 
        replicateM: replicateM, 
        unless: unless, 
        when: when
    };
})();
var PS = PS || {};
PS.Control_Lazy = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function Lazy(defer) {
        this.defer = defer;
    };
    function Lazy1(defer1) {
        this.defer1 = defer1;
    };
    function Lazy2(defer2) {
        this.defer2 = defer2;
    };
    var defer2 = function (dict) {
        return dict.defer2;
    };
    var fix2 = function (__dict_Lazy2_21) {
        return function (f) {
            return defer2(__dict_Lazy2_21)(function (_) {
                return f(fix2(__dict_Lazy2_21)(f));
            });
        };
    };
    var defer1 = function (dict) {
        return dict.defer1;
    };
    var fix1 = function (__dict_Lazy1_22) {
        return function (f) {
            return defer1(__dict_Lazy1_22)(function (_) {
                return f(fix1(__dict_Lazy1_22)(f));
            });
        };
    };
    var defer = function (dict) {
        return dict.defer;
    };
    var fix = function (__dict_Lazy_23) {
        return function (f) {
            return defer(__dict_Lazy_23)(function (_) {
                return f(fix(__dict_Lazy_23)(f));
            });
        };
    };
    return {
        Lazy: Lazy, 
        Lazy1: Lazy1, 
        Lazy2: Lazy2, 
        defer: defer, 
        defer1: defer1, 
        defer2: defer2, 
        fix: fix, 
        fix1: fix1, 
        fix2: fix2
    };
})();
var PS = PS || {};
PS.Control_Extend = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function Extend($less$less$eq, __superclass_Prelude$dotFunctor_0) {
        this["<<="] = $less$less$eq;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var $less$less$eq = function (dict) {
        return dict["<<="];
    };
    var $eq$less$eq = function (__dict_Extend_24) {
        return function (f) {
            return function (g) {
                return function (w) {
                    return f($less$less$eq(__dict_Extend_24)(g)(w));
                };
            };
        };
    };
    var $eq$greater$eq = function (__dict_Extend_25) {
        return function (f) {
            return function (g) {
                return function (w) {
                    return g($less$less$eq(__dict_Extend_25)(f)(w));
                };
            };
        };
    };
    var $eq$greater$greater = function (__dict_Extend_26) {
        return function (w) {
            return function (f) {
                return $less$less$eq(__dict_Extend_26)(f)(w);
            };
        };
    };
    var extendArr = function (__dict_Semigroup_27) {
        return new Extend(function (f) {
            return function (g) {
                return function (w) {
                    return f(function (w$prime) {
                        return g(Prelude["<>"](__dict_Semigroup_27)(w)(w$prime));
                    });
                };
            };
        }, function () {
            return Prelude.functorArr;
        });
    };
    var duplicate = function (__dict_Extend_28) {
        return function (w) {
            return $less$less$eq(__dict_Extend_28)(Prelude.id(Prelude.categoryArr))(w);
        };
    };
    return {
        "<<=": $less$less$eq, 
        "=<=": $eq$less$eq, 
        "=>=": $eq$greater$eq, 
        "=>>": $eq$greater$greater, 
        Extend: Extend, 
        duplicate: duplicate, 
        extendArr: extendArr
    };
})();
var PS = PS || {};
PS.Control_Comonad = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function Comonad(__superclass_Control$dotExtend$dotExtend_0, extract) {
        this["__superclass_Control.Extend.Extend_0"] = __superclass_Control$dotExtend$dotExtend_0;
        this.extract = extract;
    };
    var extract = function (dict) {
        return dict.extract;
    };
    return {
        Comonad: Comonad, 
        extract: extract
    };
})();
var PS = PS || {};
PS.Control_Bind = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $greater$eq$greater = function (__dict_Bind_29) {
        return function (f) {
            return function (g) {
                return function (a) {
                    return Prelude[">>="](__dict_Bind_29)(f(a))(g);
                };
            };
        };
    };
    var $eq$less$less = function (__dict_Bind_30) {
        return function (f) {
            return function (m) {
                return Prelude[">>="](__dict_Bind_30)(m)(f);
            };
        };
    };
    var $less$eq$less = function (__dict_Bind_31) {
        return function (f) {
            return function (g) {
                return function (a) {
                    return $eq$less$less(__dict_Bind_31)(f)(g(a));
                };
            };
        };
    };
    var join = function (__dict_Bind_32) {
        return function (m) {
            return Prelude[">>="](__dict_Bind_32)(m)(Prelude.id(Prelude.categoryArr));
        };
    };
    var ifM = function (__dict_Bind_33) {
        return function (cond) {
            return function (t) {
                return function (f) {
                    return Prelude[">>="](__dict_Bind_33)(cond)(function (cond$prime) {
                        return cond$prime ? t : f;
                    });
                };
            };
        };
    };
    return {
        "<=<": $less$eq$less, 
        "=<<": $eq$less$less, 
        ">=>": $greater$eq$greater, 
        ifM: ifM, 
        join: join
    };
})();
var PS = PS || {};
PS.Control_Apply = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $less$times = function (__dict_Apply_34) {
        return function (a) {
            return function (b) {
                return Prelude["<*>"](__dict_Apply_34)(Prelude["<$>"](__dict_Apply_34["__superclass_Prelude.Functor_0"]())(Prelude["const"])(a))(b);
            };
        };
    };
    var $times$greater = function (__dict_Apply_35) {
        return function (a) {
            return function (b) {
                return Prelude["<*>"](__dict_Apply_35)(Prelude["<$>"](__dict_Apply_35["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryArr)))(a))(b);
            };
        };
    };
    var lift5 = function (__dict_Apply_36) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return function (d) {
                            return function (e) {
                                return Prelude["<*>"](__dict_Apply_36)(Prelude["<*>"](__dict_Apply_36)(Prelude["<*>"](__dict_Apply_36)(Prelude["<*>"](__dict_Apply_36)(Prelude["<$>"](__dict_Apply_36["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d))(e);
                            };
                        };
                    };
                };
            };
        };
    };
    var lift4 = function (__dict_Apply_37) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return function (d) {
                            return Prelude["<*>"](__dict_Apply_37)(Prelude["<*>"](__dict_Apply_37)(Prelude["<*>"](__dict_Apply_37)(Prelude["<$>"](__dict_Apply_37["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d);
                        };
                    };
                };
            };
        };
    };
    var lift3 = function (__dict_Apply_38) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return Prelude["<*>"](__dict_Apply_38)(Prelude["<*>"](__dict_Apply_38)(Prelude["<$>"](__dict_Apply_38["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c);
                    };
                };
            };
        };
    };
    var lift2 = function (__dict_Apply_39) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return Prelude["<*>"](__dict_Apply_39)(Prelude["<$>"](__dict_Apply_39["__superclass_Prelude.Functor_0"]())(f)(a))(b);
                };
            };
        };
    };
    var forever = function (__dict_Apply_40) {
        return function (a) {
            return $times$greater(__dict_Apply_40)(a)(forever(__dict_Apply_40)(a));
        };
    };
    return {
        "*>": $times$greater, 
        "<*": $less$times, 
        forever: forever, 
        lift2: lift2, 
        lift3: lift3, 
        lift4: lift4, 
        lift5: lift5
    };
})();
var PS = PS || {};
PS.Control_Alt = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function Alt($less$bar$greater, __superclass_Prelude$dotFunctor_0) {
        this["<|>"] = $less$bar$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var $less$bar$greater = function (dict) {
        return dict["<|>"];
    };
    return {
        "<|>": $less$bar$greater, 
        Alt: Alt
    };
})();
var PS = PS || {};
PS.Control_Plus = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function Plus(__superclass_Control$dotAlt$dotAlt_0, empty) {
        this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
        this.empty = empty;
    };
    var empty = function (dict) {
        return dict.empty;
    };
    return {
        Plus: Plus, 
        empty: empty
    };
})();
var PS = PS || {};
PS.Control_Alternative = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Lazy = PS.Control_Lazy;
    var Control_Alt = PS.Control_Alt;
    function Alternative(__superclass_Control$dotPlus$dotPlus_1, __superclass_Prelude$dotApplicative_0) {
        this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
    };
    var some = function (__dict_Alternative_41) {
        return function (__dict_Lazy1_42) {
            return function (v) {
                return Prelude["<*>"]((__dict_Alternative_41["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((__dict_Alternative_41["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(v))(Control_Lazy.defer1(__dict_Lazy1_42)(function (_) {
                    return many(__dict_Alternative_41)(__dict_Lazy1_42)(v);
                }));
            };
        };
    };
    var many = function (__dict_Alternative_43) {
        return function (__dict_Lazy1_44) {
            return function (v) {
                return Control_Alt["<|>"]((__dict_Alternative_43["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(__dict_Alternative_43)(__dict_Lazy1_44)(v))(Prelude.pure(__dict_Alternative_43["__superclass_Prelude.Applicative_0"]())([  ]));
            };
        };
    };
    return {
        Alternative: Alternative, 
        many: many, 
        some: some
    };
})();
var PS = PS || {};
PS.Control_MonadPlus = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Plus = PS.Control_Plus;
    function MonadPlus(__superclass_Control$dotAlternative$dotAlternative_1, __superclass_Prelude$dotMonad_0) {
        this["__superclass_Control.Alternative.Alternative_1"] = __superclass_Control$dotAlternative$dotAlternative_1;
        this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
    };
    var guard = function (__dict_MonadPlus_45) {
        return function (_52) {
            if (_52) {
                return Prelude["return"](__dict_MonadPlus_45["__superclass_Prelude.Monad_0"]())(Prelude.unit);
            };
            if (!_52) {
                return Control_Plus.empty((__dict_MonadPlus_45["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Control.Plus.Plus_1"]());
            };
            throw new Error("Failed pattern match");
        };
    };
    return {
        MonadPlus: MonadPlus, 
        guard: guard
    };
})();
var PS = PS || {};
PS.Data_Either = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    function Left(value0) {
        this.value0 = value0;
    };
    Left.create = function (value0) {
        return new Left(value0);
    };
    function Right(value0) {
        this.value0 = value0;
    };
    Right.create = function (value0) {
        return new Right(value0);
    };
    var showEither = function (__dict_Show_46) {
        return function (__dict_Show_47) {
            return new Prelude.Show(function (_62) {
                if (_62 instanceof Left) {
                    return "Left (" + (Prelude.show(__dict_Show_46)(_62.value0) + ")");
                };
                if (_62 instanceof Right) {
                    return "Right (" + (Prelude.show(__dict_Show_47)(_62.value0) + ")");
                };
                throw new Error("Failed pattern match");
            });
        };
    };
    var functorEither = new Prelude.Functor(function (_56) {
        return function (_57) {
            if (_57 instanceof Left) {
                return new Left(_57.value0);
            };
            if (_57 instanceof Right) {
                return new Right(_56(_57.value0));
            };
            throw new Error("Failed pattern match");
        };
    });
    var eqEither = function (__dict_Eq_50) {
        return function (__dict_Eq_51) {
            return new Prelude.Eq(function (a) {
                return function (b) {
                    return !Prelude["=="](eqEither(__dict_Eq_50)(__dict_Eq_51))(a)(b);
                };
            }, function (_63) {
                return function (_64) {
                    if (_63 instanceof Left && _64 instanceof Left) {
                        return Prelude["=="](__dict_Eq_50)(_63.value0)(_64.value0);
                    };
                    if (_63 instanceof Right && _64 instanceof Right) {
                        return Prelude["=="](__dict_Eq_51)(_63.value0)(_64.value0);
                    };
                    return false;
                };
            });
        };
    };
    var ordEither = function (__dict_Ord_48) {
        return function (__dict_Ord_49) {
            return new Prelude.Ord(function () {
                return eqEither(__dict_Ord_48["__superclass_Prelude.Eq_0"]())(__dict_Ord_49["__superclass_Prelude.Eq_0"]());
            }, function (_65) {
                return function (_66) {
                    if (_65 instanceof Left && _66 instanceof Left) {
                        return Prelude.compare(__dict_Ord_48)(_65.value0)(_66.value0);
                    };
                    if (_65 instanceof Right && _66 instanceof Right) {
                        return Prelude.compare(__dict_Ord_49)(_65.value0)(_66.value0);
                    };
                    if (_65 instanceof Left) {
                        return Prelude.LT.value;
                    };
                    if (_66 instanceof Left) {
                        return Prelude.GT.value;
                    };
                    throw new Error("Failed pattern match");
                };
            });
        };
    };
    var either = function (_53) {
        return function (_54) {
            return function (_55) {
                if (_55 instanceof Left) {
                    return _53(_55.value0);
                };
                if (_55 instanceof Right) {
                    return _54(_55.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var isLeft = either(Prelude["const"](true))(Prelude["const"](false));
    var isRight = either(Prelude["const"](false))(Prelude["const"](true));
    var applyEither = new Prelude.Apply(function (_58) {
        return function (_59) {
            if (_58 instanceof Left) {
                return new Left(_58.value0);
            };
            if (_58 instanceof Right) {
                return Prelude["<$>"](functorEither)(_58.value0)(_59);
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return functorEither;
    });
    var bindEither = new Prelude.Bind(either(function (e) {
        return function (_) {
            return new Left(e);
        };
    })(function (a) {
        return function (f) {
            return f(a);
        };
    }), function () {
        return applyEither;
    });
    var applicativeEither = new Prelude.Applicative(function () {
        return applyEither;
    }, Right.create);
    var monadEither = new Prelude.Monad(function () {
        return applicativeEither;
    }, function () {
        return bindEither;
    });
    var altEither = new Control_Alt.Alt(function (_60) {
        return function (_61) {
            if (_60 instanceof Left) {
                return _61;
            };
            return _60;
        };
    }, function () {
        return functorEither;
    });
    return {
        Left: Left, 
        Right: Right, 
        altEither: altEither, 
        applicativeEither: applicativeEither, 
        applyEither: applyEither, 
        bindEither: bindEither, 
        either: either, 
        eqEither: eqEither, 
        functorEither: functorEither, 
        isLeft: isLeft, 
        isRight: isRight, 
        monadEither: monadEither, 
        ordEither: ordEither, 
        showEither: showEither
    };
})();
var PS = PS || {};
PS.Data_Either_Nested = (function () {
    "use strict";
    var Data_Either = PS.Data_Either;
    var Prelude = PS.Prelude;
    var choice2 = Data_Either.either;
    var choice3 = function (a) {
        return function (b) {
            return function (c) {
                return Data_Either.either(a)(choice2(b)(c));
            };
        };
    };
    var choice4 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return Data_Either.either(a)(choice3(b)(c)(d));
                };
            };
        };
    };
    var choice5 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return Data_Either.either(a)(choice4(b)(c)(d)(e));
                    };
                };
            };
        };
    };
    var choice6 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return Data_Either.either(a)(choice5(b)(c)(d)(e)(f));
                        };
                    };
                };
            };
        };
    };
    var choice7 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return Data_Either.either(a)(choice6(b)(c)(d)(e)(f)(g));
                            };
                        };
                    };
                };
            };
        };
    };
    var choice8 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return function (h) {
                                    return Data_Either.either(a)(choice7(b)(c)(d)(e)(f)(g)(h));
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    var choice9 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return function (h) {
                                    return function (i) {
                                        return Data_Either.either(a)(choice8(b)(c)(d)(e)(f)(g)(h)(i));
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    var choice10 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return function (h) {
                                    return function (i) {
                                        return function (j) {
                                            return Data_Either.either(a)(choice9(b)(c)(d)(e)(f)(g)(h)(i)(j));
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    return {
        choice10: choice10, 
        choice2: choice2, 
        choice3: choice3, 
        choice4: choice4, 
        choice5: choice5, 
        choice6: choice6, 
        choice7: choice7, 
        choice8: choice8, 
        choice9: choice9
    };
})();
var PS = PS || {};
PS.Data_Maybe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Extend = PS.Control_Extend;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var Control_MonadPlus = PS.Control_MonadPlus;
    function Nothing() {

    };
    Nothing.value = new Nothing();
    function Just(value0) {
        this.value0 = value0;
    };
    Just.create = function (value0) {
        return new Just(value0);
    };
    var showMaybe = function (__dict_Show_52) {
        return new Prelude.Show(function (_82) {
            if (_82 instanceof Just) {
                return "Just (" + (Prelude.show(__dict_Show_52)(_82.value0) + ")");
            };
            if (_82 instanceof Nothing) {
                return "Nothing";
            };
            throw new Error("Failed pattern match");
        });
    };
    var semigroupMaybe = function (__dict_Semigroup_53) {
        return new Prelude.Semigroup(function (_80) {
            return function (_81) {
                if (_80 instanceof Nothing) {
                    return _81;
                };
                if (_81 instanceof Nothing) {
                    return _80;
                };
                if (_80 instanceof Just && _81 instanceof Just) {
                    return new Just(Prelude["<>"](__dict_Semigroup_53)(_80.value0)(_81.value0));
                };
                throw new Error("Failed pattern match");
            };
        });
    };
    var maybe = function (_67) {
        return function (_68) {
            return function (_69) {
                if (_69 instanceof Nothing) {
                    return _67;
                };
                if (_69 instanceof Just) {
                    return _68(_69.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var isNothing = maybe(true)(Prelude["const"](false));
    var isJust = maybe(false)(Prelude["const"](true));
    var functorMaybe = new Prelude.Functor(function (_70) {
        return function (_71) {
            if (_71 instanceof Just) {
                return new Just(_70(_71.value0));
            };
            return Nothing.value;
        };
    });
    var fromMaybe = function (a) {
        return maybe(a)(Prelude.id(Prelude.categoryArr));
    };
    var extendMaybe = new Control_Extend.Extend(function (_78) {
        return function (_79) {
            if (_79 instanceof Nothing) {
                return Nothing.value;
            };
            return Just.create(_78(_79));
        };
    }, function () {
        return functorMaybe;
    });
    var eqMaybe = function (__dict_Eq_55) {
        return new Prelude.Eq(function (a) {
            return function (b) {
                return !Prelude["=="](eqMaybe(__dict_Eq_55))(a)(b);
            };
        }, function (_83) {
            return function (_84) {
                if (_83 instanceof Nothing && _84 instanceof Nothing) {
                    return true;
                };
                if (_83 instanceof Just && _84 instanceof Just) {
                    return Prelude["=="](__dict_Eq_55)(_83.value0)(_84.value0);
                };
                return false;
            };
        });
    };
    var ordMaybe = function (__dict_Ord_54) {
        return new Prelude.Ord(function () {
            return eqMaybe(__dict_Ord_54["__superclass_Prelude.Eq_0"]());
        }, function (_85) {
            return function (_86) {
                if (_85 instanceof Just && _86 instanceof Just) {
                    return Prelude.compare(__dict_Ord_54)(_85.value0)(_86.value0);
                };
                if (_85 instanceof Nothing && _86 instanceof Nothing) {
                    return Prelude.EQ.value;
                };
                if (_85 instanceof Nothing) {
                    return Prelude.LT.value;
                };
                if (_86 instanceof Nothing) {
                    return Prelude.GT.value;
                };
                throw new Error("Failed pattern match");
            };
        });
    };
    var applyMaybe = new Prelude.Apply(function (_72) {
        return function (_73) {
            if (_72 instanceof Just) {
                return Prelude["<$>"](functorMaybe)(_72.value0)(_73);
            };
            if (_72 instanceof Nothing) {
                return Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return functorMaybe;
    });
    var bindMaybe = new Prelude.Bind(function (_76) {
        return function (_77) {
            if (_76 instanceof Just) {
                return _77(_76.value0);
            };
            if (_76 instanceof Nothing) {
                return Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return applyMaybe;
    });
    var applicativeMaybe = new Prelude.Applicative(function () {
        return applyMaybe;
    }, Just.create);
    var monadMaybe = new Prelude.Monad(function () {
        return applicativeMaybe;
    }, function () {
        return bindMaybe;
    });
    var altMaybe = new Control_Alt.Alt(function (_74) {
        return function (_75) {
            if (_74 instanceof Nothing) {
                return _75;
            };
            return _74;
        };
    }, function () {
        return functorMaybe;
    });
    var plusMaybe = new Control_Plus.Plus(function () {
        return altMaybe;
    }, Nothing.value);
    var alternativeMaybe = new Control_Alternative.Alternative(function () {
        return plusMaybe;
    }, function () {
        return applicativeMaybe;
    });
    var monadPlusMaybe = new Control_MonadPlus.MonadPlus(function () {
        return alternativeMaybe;
    }, function () {
        return monadMaybe;
    });
    return {
        Just: Just, 
        Nothing: Nothing, 
        altMaybe: altMaybe, 
        alternativeMaybe: alternativeMaybe, 
        applicativeMaybe: applicativeMaybe, 
        applyMaybe: applyMaybe, 
        bindMaybe: bindMaybe, 
        eqMaybe: eqMaybe, 
        extendMaybe: extendMaybe, 
        fromMaybe: fromMaybe, 
        functorMaybe: functorMaybe, 
        isJust: isJust, 
        isNothing: isNothing, 
        maybe: maybe, 
        monadMaybe: monadMaybe, 
        monadPlusMaybe: monadPlusMaybe, 
        ordMaybe: ordMaybe, 
        plusMaybe: plusMaybe, 
        semigroupMaybe: semigroupMaybe, 
        showMaybe: showMaybe
    };
})();
var PS = PS || {};
PS.Data_Array = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Prelude_Unsafe = PS.Prelude_Unsafe;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var Control_MonadPlus = PS.Control_MonadPlus;
    function snoc(l) {  return function (e) {    var l1 = l.slice();    l1.push(e);     return l1;  };};
    function length (xs) {  return xs.length;};
    function findIndex (f) {  return function (arr) {    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
    function findLastIndex (f) {  return function (arr) {    for (var i = arr.length - 1; i >= 0; i--) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
    function append (l1) {  return function (l2) {    return l1.concat(l2);  };};
    function concat (xss) {  var result = [];  for (var i = 0, l = xss.length; i < l; i++) {    result.push.apply(result, xss[i]);  }  return result;};
    function reverse (l) {  return l.slice().reverse();};
    function drop (n) {  return function (l) {    return l.slice(n);  };};
    function slice (s) {  return function (e) {    return function (l) {      return l.slice(s, e);    };  };};
    function insertAt (index) {  return function (a) {    return function (l) {      var l1 = l.slice();      l1.splice(index, 0, a);      return l1;    };   };};
    function deleteAt (index) {  return function (n) {    return function (l) {      var l1 = l.slice();      l1.splice(index, n);      return l1;    };   };};
    function updateAt (index) {  return function (a) {    return function (l) {      var i = ~~index;      if (i < 0 || i >= l.length) return l;      var l1 = l.slice();      l1[i] = a;      return l1;    };   };};
    function concatMap (f) {  return function (arr) {    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      Array.prototype.push.apply(result, f(arr[i]));    }    return result;  };};
    function map (f) {  return function (arr) {    var l = arr.length;    var result = new Array(l);    for (var i = 0; i < l; i++) {      result[i] = f(arr[i]);    }    return result;  };};
    function filter (f) {  return function (arr) {    var n = 0;    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        result[n++] = arr[i];      }    }    return result;  };};
    function range (start) {  return function (end) {    var i = ~~start, e = ~~end;    var step = i > e ? -1 : 1;    var result = [i], n = 1;    while (i !== e) {      i += step;      result[n++] = i;    }    return result;  };};
    function zipWith (f) {  return function (xs) {    return function (ys) {      var l = xs.length < ys.length ? xs.length : ys.length;      var result = new Array(l);      for (var i = 0; i < l; i++) {        result[i] = f(xs[i])(ys[i]);      }      return result;    };  };};
    function sortJS (f) {  return function (l) {    return l.slice().sort(function (x, y) {      return f(x)(y);    });  };};
    var $dot$dot = range;
    var $bang$bang = function (xs) {
        return function (n) {
            var isInt = function (n_1) {
                return n_1 !== ~~n_1;
            };
            return n < 0 || (n >= length(xs) || isInt(n)) ? Data_Maybe.Nothing.value : new Data_Maybe.Just(xs[n]);
        };
    };
    var take = function (n) {
        return slice(0)(n);
    };
    var tail = function (_89) {
        if (_89.length >= 1) {
            var _395 = _89.slice(1);
            return new Data_Maybe.Just(_395);
        };
        return Data_Maybe.Nothing.value;
    };
    var span = (function () {
        var go = function (__copy__105) {
            return function (__copy__106) {
                return function (__copy__107) {
                    var _105 = __copy__105;
                    var _106 = __copy__106;
                    var _107 = __copy__107;
                    tco: while (true) {
                        if (_107.length >= 1) {
                            var _400 = _107.slice(1);
                            if (_106(_107[0])) {
                                var __tco__105 = Prelude[":"](_107[0])(_105);
                                var __tco__106 = _106;
                                _105 = __tco__105;
                                _106 = __tco__106;
                                _107 = _400;
                                continue tco;
                            };
                        };
                        return {
                            init: reverse(_105), 
                            rest: _107
                        };
                    };
                };
            };
        };
        return go([  ]);
    })();
    var sortBy = function (comp) {
        return function (xs) {
            var comp$prime = function (x) {
                return function (y) {
                    var _401 = comp(x)(y);
                    if (_401 instanceof Prelude.GT) {
                        return 1;
                    };
                    if (_401 instanceof Prelude.EQ) {
                        return 0;
                    };
                    if (_401 instanceof Prelude.LT) {
                        return -1;
                    };
                    throw new Error("Failed pattern match");
                };
            };
            return sortJS(comp$prime)(xs);
        };
    };
    var sort = function (__dict_Ord_56) {
        return function (xs) {
            return sortBy(Prelude.compare(__dict_Ord_56))(xs);
        };
    };
    var singleton = function (a) {
        return [ a ];
    };
    var semigroupArray = new Prelude.Semigroup(append);
    var $$null = function (_91) {
        if (_91.length === 0) {
            return true;
        };
        return false;
    };
    var nubBy = function (_98) {
        return function (_99) {
            if (_99.length === 0) {
                return [  ];
            };
            if (_99.length >= 1) {
                var _406 = _99.slice(1);
                return Prelude[":"](_99[0])(nubBy(_98)(filter(function (y) {
                    return !_98(_99[0])(y);
                })(_406)));
            };
            throw new Error("Failed pattern match");
        };
    };
    var nub = function (__dict_Eq_57) {
        return nubBy(Prelude["=="](__dict_Eq_57));
    };
    var mapMaybe = function (f) {
        return concatMap(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe.maybe([  ])(singleton))(f));
    };
    var last = function (__copy__88) {
        var _88 = __copy__88;
        tco: while (true) {
            if (_88.length >= 1) {
                var _409 = _88.slice(1);
                if (_409.length === 0) {
                    return new Data_Maybe.Just(_88[0]);
                };
            };
            if (_88.length >= 1) {
                var _411 = _88.slice(1);
                _88 = _411;
                continue tco;
            };
            return Data_Maybe.Nothing.value;
        };
    };
    var intersectBy = function (_95) {
        return function (_96) {
            return function (_97) {
                if (_96.length === 0) {
                    return [  ];
                };
                if (_97.length === 0) {
                    return [  ];
                };
                var el = function (x) {
                    return findIndex(_95(x))(_97) >= 0;
                };
                return filter(el)(_96);
            };
        };
    };
    var intersect = function (__dict_Eq_58) {
        return intersectBy(Prelude["=="](__dict_Eq_58));
    };
    var init = function (_90) {
        if (_90.length === 0) {
            return Data_Maybe.Nothing.value;
        };
        return new Data_Maybe.Just(slice(0)(length(_90) - 1)(_90));
    };
    var head = function (_87) {
        if (_87.length >= 1) {
            var _418 = _87.slice(1);
            return new Data_Maybe.Just(_87[0]);
        };
        return Data_Maybe.Nothing.value;
    };
    var groupBy = (function () {
        var go = function (__copy__102) {
            return function (__copy__103) {
                return function (__copy__104) {
                    var _102 = __copy__102;
                    var _103 = __copy__103;
                    var _104 = __copy__104;
                    tco: while (true) {
                        if (_104.length === 0) {
                            return reverse(_102);
                        };
                        if (_104.length >= 1) {
                            var _423 = _104.slice(1);
                            var sp = span(_103(_104[0]))(_423);
                            var __tco__102 = Prelude[":"](Prelude[":"](_104[0])(sp.init))(_102);
                            var __tco__103 = _103;
                            _102 = __tco__102;
                            _103 = __tco__103;
                            _104 = sp.rest;
                            continue tco;
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
        };
        return go([  ]);
    })();
    var group = function (__dict_Eq_59) {
        return function (xs) {
            return groupBy(Prelude["=="](__dict_Eq_59))(xs);
        };
    };
    var group$prime = function (__dict_Ord_60) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(group(__dict_Ord_60["__superclass_Prelude.Eq_0"]()))(sort(__dict_Ord_60));
    };
    var functorArray = new Prelude.Functor(map);
    var elemLastIndex = function (__dict_Eq_61) {
        return function (x) {
            return findLastIndex(Prelude["=="](__dict_Eq_61)(x));
        };
    };
    var elemIndex = function (__dict_Eq_62) {
        return function (x) {
            return findIndex(Prelude["=="](__dict_Eq_62)(x));
        };
    };
    var deleteBy = function (_92) {
        return function (_93) {
            return function (_94) {
                if (_94.length === 0) {
                    return [  ];
                };
                var _427 = findIndex(_92(_93))(_94);
                if (_427 < 0) {
                    return _94;
                };
                return deleteAt(_427)(1)(_94);
            };
        };
    };
    var $$delete = function (__dict_Eq_63) {
        return deleteBy(Prelude["=="](__dict_Eq_63));
    };
    var $bslash$bslash = function (__dict_Eq_64) {
        return function (xs) {
            return function (ys) {
                var go = function (__copy__100) {
                    return function (__copy__101) {
                        var _100 = __copy__100;
                        var _101 = __copy__101;
                        tco: while (true) {
                            if (_101.length === 0) {
                                return _100;
                            };
                            if (_100.length === 0) {
                                return [  ];
                            };
                            if (_101.length >= 1) {
                                var _431 = _101.slice(1);
                                var __tco__100 = $$delete(__dict_Eq_64)(_101[0])(_100);
                                _100 = __tco__100;
                                _101 = _431;
                                continue tco;
                            };
                            throw new Error("Failed pattern match");
                        };
                    };
                };
                return go(xs)(ys);
            };
        };
    };
    var catMaybes = concatMap(Data_Maybe.maybe([  ])(singleton));
    var monadArray = new Prelude.Monad(function () {
        return applicativeArray;
    }, function () {
        return bindArray;
    });
    var bindArray = new Prelude.Bind(Prelude.flip(concatMap), function () {
        return applyArray;
    });
    var applyArray = new Prelude.Apply(Prelude.ap(monadArray), function () {
        return functorArray;
    });
    var applicativeArray = new Prelude.Applicative(function () {
        return applyArray;
    }, singleton);
    var altArray = new Control_Alt.Alt(append, function () {
        return functorArray;
    });
    var plusArray = new Control_Plus.Plus(function () {
        return altArray;
    }, [  ]);
    var alternativeArray = new Control_Alternative.Alternative(function () {
        return plusArray;
    }, function () {
        return applicativeArray;
    });
    var monadPlusArray = new Control_MonadPlus.MonadPlus(function () {
        return alternativeArray;
    }, function () {
        return monadArray;
    });
    return {
        "!!": $bang$bang, 
        "..": $dot$dot, 
        "\\\\": $bslash$bslash, 
        altArray: altArray, 
        alternativeArray: alternativeArray, 
        append: append, 
        applicativeArray: applicativeArray, 
        applyArray: applyArray, 
        bindArray: bindArray, 
        catMaybes: catMaybes, 
        concat: concat, 
        concatMap: concatMap, 
        "delete": $$delete, 
        deleteAt: deleteAt, 
        deleteBy: deleteBy, 
        drop: drop, 
        elemIndex: elemIndex, 
        elemLastIndex: elemLastIndex, 
        filter: filter, 
        findIndex: findIndex, 
        findLastIndex: findLastIndex, 
        functorArray: functorArray, 
        group: group, 
        "group'": group$prime, 
        groupBy: groupBy, 
        head: head, 
        init: init, 
        insertAt: insertAt, 
        intersect: intersect, 
        intersectBy: intersectBy, 
        last: last, 
        length: length, 
        map: map, 
        mapMaybe: mapMaybe, 
        monadArray: monadArray, 
        monadPlusArray: monadPlusArray, 
        nub: nub, 
        nubBy: nubBy, 
        "null": $$null, 
        plusArray: plusArray, 
        range: range, 
        reverse: reverse, 
        semigroupArray: semigroupArray, 
        singleton: singleton, 
        snoc: snoc, 
        sort: sort, 
        sortBy: sortBy, 
        span: span, 
        tail: tail, 
        take: take, 
        updateAt: updateAt, 
        zipWith: zipWith
    };
})();
var PS = PS || {};
PS.Data_Foreign = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Function = PS.Data_Function;
    var Data_Either = PS.Data_Either;
    function TypeMismatch(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    TypeMismatch.create = function (value0) {
        return function (value1) {
            return new TypeMismatch(value0, value1);
        };
    };
    function ErrorAtIndex(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ErrorAtIndex.create = function (value0) {
        return function (value1) {
            return new ErrorAtIndex(value0, value1);
        };
    };
    function ErrorAtProperty(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    ErrorAtProperty.create = function (value0) {
        return function (value1) {
            return new ErrorAtProperty(value0, value1);
        };
    };
    function JSONError(value0) {
        this.value0 = value0;
    };
    JSONError.create = function (value0) {
        return new JSONError(value0);
    };
    
  function parseJSONImpl(left, right, str) {
    try {
      return right(JSON.parse(str));
    } catch (e) {
      return left(e.toString());
    }
  }
  ;
    
  function toForeign(value) {
    return value;
  }
  ;
    
  function unsafeFromForeign(value) {
    return value;
  }
  ;
    
  function typeOf(value) {
    return typeof value;
  }
  ;
    
  function tagOf(value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  }
  ;
    
  function isNull(value) {
    return value === null;
  }
  ;
    
  function isUndefined(value) {
    return value === undefined;
  }
  ;
    
  var isArray = Array.isArray || function(value) {
    return Object.prototype.toString.call(value) === '[object Array]';
  };
  ;
    var unsafeReadPrim = function (_108) {
        return function (_109) {
            if (tagOf(_109) === _108) {
                return Prelude.pure(Data_Either.applicativeEither)(unsafeFromForeign(_109));
            };
            return new Data_Either.Left(new TypeMismatch(_108, tagOf(_109)));
        };
    };
    var showForeignError = new Prelude.Show(function (_111) {
        if (_111 instanceof TypeMismatch) {
            return "Type mismatch: expected " + (_111.value0 + (", found " + _111.value1));
        };
        if (_111 instanceof ErrorAtIndex) {
            return "Error at array index " + (Prelude.show(Prelude.showNumber)(_111.value0) + (": " + Prelude.show(showForeignError)(_111.value1)));
        };
        if (_111 instanceof ErrorAtProperty) {
            return "Error at property " + (Prelude.show(Prelude.showString)(_111.value0) + (": " + Prelude.show(showForeignError)(_111.value1)));
        };
        if (_111 instanceof JSONError) {
            return "JSON error: " + _111.value0;
        };
        throw new Error("Failed pattern match");
    });
    var readString = unsafeReadPrim("String");
    var readNumber = unsafeReadPrim("Number");
    var readBoolean = unsafeReadPrim("Boolean");
    var readArray = function (_110) {
        if (isArray(_110)) {
            return Prelude.pure(Data_Either.applicativeEither)(unsafeFromForeign(_110));
        };
        return new Data_Either.Left(new TypeMismatch("array", tagOf(_110)));
    };
    var parseJSON = function (json) {
        return parseJSONImpl(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Either.Left.create)(JSONError.create), Data_Either.Right.create, json);
    };
    var eqForeignError = new Prelude.Eq(function (a) {
        return function (b) {
            return !Prelude["=="](eqForeignError)(a)(b);
        };
    }, function (_112) {
        return function (_113) {
            if (_112 instanceof TypeMismatch && _113 instanceof TypeMismatch) {
                return _112.value0 === _113.value0 && _112.value1 === _113.value1;
            };
            if (_112 instanceof ErrorAtIndex && _113 instanceof ErrorAtIndex) {
                return _112.value0 === _113.value0 && Prelude["=="](eqForeignError)(_112.value1)(_113.value1);
            };
            if (_112 instanceof ErrorAtProperty && _113 instanceof ErrorAtProperty) {
                return _112.value0 === _113.value0 && Prelude["=="](eqForeignError)(_112.value1)(_113.value1);
            };
            if (_112 instanceof JSONError && _113 instanceof JSONError) {
                return _112.value0 === _113.value0;
            };
            return false;
        };
    });
    return {
        ErrorAtIndex: ErrorAtIndex, 
        ErrorAtProperty: ErrorAtProperty, 
        JSONError: JSONError, 
        TypeMismatch: TypeMismatch, 
        eqForeignError: eqForeignError, 
        isArray: isArray, 
        isNull: isNull, 
        isUndefined: isUndefined, 
        parseJSON: parseJSON, 
        readArray: readArray, 
        readBoolean: readBoolean, 
        readNumber: readNumber, 
        readString: readString, 
        showForeignError: showForeignError, 
        tagOf: tagOf, 
        toForeign: toForeign, 
        typeOf: typeOf, 
        unsafeFromForeign: unsafeFromForeign
    };
})();
var PS = PS || {};
PS.Control_Monad_JQuery = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
  function ready(func) {
    return function () {
      jQuery(document).ready(func);
    };
  }
  ;
    
  function select(selector) {
    return function () {
      return jQuery(selector);
    };
  }
  ;
    
  function find(selector) {
    return function(ob) {
      return function () {
        return ob.find(selector);
      };
    };
  }
  ;
    
  function parent(ob) {
    return function () {
      return ob.parent();
    };
  }
  ;
    
  function closest(selector) {
    return function(ob) {
      return function () {
        return ob.closest(selector);
      };
    };
  }
  ;
    
  function create(html) {
    return function () {
      return jQuery(html);
    };
  }
  ;
    
  function setAttr(attr) {
    return function(val) {
      return function(ob) {
        return function () {
          return ob.attr(attr, val);
        };
      };
    };
  }
  ;
    
  function attr(attrs) {
    return function(ob) {
      return function () {
        return ob.attr(attrs);
      };
    };
  }
  ;
    
  function css(props) {
    return function(ob) {
      return function () {
        return ob.css(props);
      };
    };
  }
  ;
    
  function hasClass(cls) {
    return function(ob) {
      return function () {
        return ob.hasClass(cls);
      };
    };
  }
  ;
    
  function toggleClass(cls) {
    return function(ob) {
      return function () {
        return ob.toggleClass(cls);
      };
    };
  }
  ;
    
  function toggleClass$prime(cls) {
    return function(flag) {
      return function(ob) {
        return function () {
          return ob.toggleClass(cls, flag);
        };
      };
    };
  }
  ;
    
  function setProp(p) {
    return function(val) {
      return function(ob) {
        return function () {
          return ob.prop(p, val);
        };
      };
    };
  }
  ;
    
  function getProp(p) {
    return function(ob) {
      return function () {
        return ob.prop(p);
      };
    };
  }
  ;
    
  function append(ob1) {
    return function(ob) {
      return function () {
        return ob.append(ob1);
      };
    };
  }
  ;
    
  function appendAtIndex(i) {
    return function(ob1) {
      return function(ob) {
        return function () {
          var children = ob.children();
          if (children.length > 0) {
            if (i <= 0) {
               ob.prepend(ob1);
            } else if (i >= children.length) {
               ob.append(ob1);
            } else {
               ob1.insertBefore(jQuery(children[i]));
            }
            return ob;
          } else {
            return ob.append(ob1);
          }
        };
      };
    };
  }
  ;
    
  function remove(ob) {
    return function () {
      return ob.remove();
    };
  }
  ;
    
  function clear(ob) {
    return function () {
      return ob.empty();
    };
  }
  ;
    
  function before(ob) {
    return function(ob1) {
      return function () {
        return ob1.before(ob);
      };
    };
  }
  ;
    
  function appendText(s) {
    return function(ob) {
      return function () {
        return ob.append(s);
      };
    };
  }
  ;
    
  function body() {
    return jQuery(document.body);
  }
  ;
    
  function getText(ob) {
    return function() {
      return ob.text();
    };
  }
  ;
    
  function setText(text) {
    return function(ob) {
      return function() {
        return ob.text(text);
      };
    };
  }
  ;
    
  function getValue(ob) {
    return function() {
      return ob.val();
    };
  }
  ;
    
  function setValue(val) {
    return function(ob) {
      return function() {
        return ob.val(val);
      };
    };
  }
  ;
    
  function toggle(ob) {
    return function() {
      return ob.toggle();
    };
  }
  ;
    
  function toggle$prime(flag) {
    return function(ob) {
      return function() {
        return ob.toggle(flag);
      };
    };
  }
  ;
    
  function on(evt) {
    return function(act) {
      return function(ob) {
        return function() {
          return ob.on(evt, function(e) {
            act(e)(jQuery(this))();
          });
        };
      };
    };
  }
  ;
    
  function on$prime(evt) {
    return function(sel) {
      return function(act) {
        return function(ob) {
          return function() {
            return ob.on(evt, sel, function(e) {
              act(e)(jQuery(this))();
            });
          };
        };
      };
    };
  }
  ;
    
  function preventDefault(e) {
    return function() {
      e.preventDefault();
    };
  }
  ;
    
  function stopPropagation(e) {
    return function() {
      e.stopPropagation();
    };
  }
  ;
    
  function stopImmediatePropagation(e) {
    return function() {
      e.stopImmediatePropagation();
    };
  }
  ;
    var removeClass = function (cls) {
        return toggleClass$prime(cls)(false);
    };
    var hide = toggle$prime(false);
    var display = toggle$prime(true);
    var addClass = function (cls) {
        return toggleClass$prime(cls)(true);
    };
    return {
        addClass: addClass, 
        append: append, 
        appendAtIndex: appendAtIndex, 
        appendText: appendText, 
        attr: attr, 
        before: before, 
        body: body, 
        clear: clear, 
        closest: closest, 
        create: create, 
        css: css, 
        display: display, 
        find: find, 
        getProp: getProp, 
        getText: getText, 
        getValue: getValue, 
        hasClass: hasClass, 
        hide: hide, 
        on: on, 
        "on'": on$prime, 
        parent: parent, 
        preventDefault: preventDefault, 
        ready: ready, 
        remove: remove, 
        removeClass: removeClass, 
        select: select, 
        setAttr: setAttr, 
        setProp: setProp, 
        setText: setText, 
        setValue: setValue, 
        stopImmediatePropagation: stopImmediatePropagation, 
        stopPropagation: stopPropagation, 
        toggle: toggle, 
        "toggle'": toggle$prime, 
        toggleClass: toggleClass, 
        "toggleClass'": toggleClass$prime
    };
})();
var PS = PS || {};
PS.Data_Foreign_Index = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Data_Foreign = PS.Data_Foreign;
    var Prelude = PS.Prelude;
    var Data_Either = PS.Data_Either;
    function Index($bang, errorAt, hasOwnProperty, hasProperty) {
        this["!"] = $bang;
        this.errorAt = errorAt;
        this.hasOwnProperty = hasOwnProperty;
        this.hasProperty = hasProperty;
    };
    
  function unsafeReadPropImpl(f, s, key, value) {
    return value == null ? f : s(value[key]);
  }
  ;
    
  function unsafeHasOwnProperty(prop, value) {
    return Object.prototype.hasOwnProperty.call(value, prop);
  }
  ;
    
  function unsafeHasProperty(prop, value) {
    return prop in value;
  }
  ;
    var $bang = function (dict) {
        return dict["!"];
    };
    var unsafeReadProp = function (k) {
        return function (value) {
            return unsafeReadPropImpl(new Data_Either.Left(new Data_Foreign.TypeMismatch("object", Data_Foreign.typeOf(value))), Prelude.pure(Data_Either.applicativeEither), k, value);
        };
    };
    var prop = unsafeReadProp;
    var index = unsafeReadProp;
    var hasPropertyImpl = function (_116) {
        return function (_117) {
            if (Data_Foreign.isNull(_117)) {
                return false;
            };
            if (Data_Foreign.isUndefined(_117)) {
                return false;
            };
            if (Data_Foreign.typeOf(_117) === "object" || Data_Foreign.typeOf(_117) === "function") {
                return unsafeHasProperty(_116, _117);
            };
            return false;
        };
    };
    var hasProperty = function (dict) {
        return dict.hasProperty;
    };
    var hasOwnPropertyImpl = function (_114) {
        return function (_115) {
            if (Data_Foreign.isNull(_115)) {
                return false;
            };
            if (Data_Foreign.isUndefined(_115)) {
                return false;
            };
            if (Data_Foreign.typeOf(_115) === "object" || Data_Foreign.typeOf(_115) === "function") {
                return unsafeHasOwnProperty(_114, _115);
            };
            return false;
        };
    };
    var indexNumber = new Index(Prelude.flip(index), Data_Foreign.ErrorAtIndex.create, hasOwnPropertyImpl, hasPropertyImpl);
    var indexString = new Index(Prelude.flip(prop), Data_Foreign.ErrorAtProperty.create, hasOwnPropertyImpl, hasPropertyImpl);
    var hasOwnProperty = function (dict) {
        return dict.hasOwnProperty;
    };
    var errorAt = function (dict) {
        return dict.errorAt;
    };
    return {
        "!": $bang, 
        Index: Index, 
        errorAt: errorAt, 
        hasOwnProperty: hasOwnProperty, 
        hasProperty: hasProperty, 
        index: index, 
        indexNumber: indexNumber, 
        indexString: indexString, 
        prop: prop
    };
})();
var PS = PS || {};
PS.Data_Foreign_Keys = (function () {
    "use strict";
    var Data_Foreign = PS.Data_Foreign;
    var Prelude = PS.Prelude;
    var Data_Either = PS.Data_Either;
    
  var unsafeKeys = Object.keys || function(value) {
    var keys = [];
    for (var prop in value) {
      if (Object.prototype.hasOwnProperty.call(value, prop)) {
        keys.push(prop);
      }
    }
    return keys;
  };
  ;
    var keys = function (_118) {
        if (Data_Foreign.isNull(_118)) {
            return Data_Either.Left.create(new Data_Foreign.TypeMismatch("object", "null"));
        };
        if (Data_Foreign.isUndefined(_118)) {
            return Data_Either.Left.create(new Data_Foreign.TypeMismatch("object", "undefined"));
        };
        if (Data_Foreign.typeOf(_118) === "object") {
            return Data_Either.Right.create(unsafeKeys(_118));
        };
        return Data_Either.Left.create(new Data_Foreign.TypeMismatch("object", Data_Foreign.typeOf(_118)));
    };
    return {
        keys: keys
    };
})();
var PS = PS || {};
PS.Data_Array_ST = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    
  function runSTArray(f) {
    return f;
  };
    
  function emptySTArray() {
    return [];
  };
    
  function peekSTArrayImpl(arr, i, s, f) {
    return function() {
      var index = ~~i;
      if (0 <= index && index < arr.length) {
        return s(arr[index]);
      } else {
        return f;
      }
    };
  };
    
  function pokeSTArrayImpl(arr, i, a) {
    return function() {
      var index = ~~i;
      if (0 <= index && index <= arr.length) {
        arr[index] = a;
        return true;
      }
      return false;
    };
  };
    
  function pushSTArrayImpl(arr, a) {
    return function() {
      arr.push(a);
      return {};
    };
  };
    var pushSTArray = function (arr) {
        return function (a) {
            return pushSTArrayImpl(arr, a);
        };
    };
    var pokeSTArray = function (arr) {
        return function (i) {
            return function (a) {
                return pokeSTArrayImpl(arr, i, a);
            };
        };
    };
    var peekSTArray = function (arr) {
        return function (i) {
            return peekSTArrayImpl(arr, i, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
        };
    };
    return {
        emptySTArray: emptySTArray, 
        peekSTArray: peekSTArray, 
        pokeSTArray: pokeSTArray, 
        pushSTArray: pushSTArray, 
        runSTArray: runSTArray
    };
})();
var PS = PS || {};
PS.Data_Foreign_Null = (function () {
    "use strict";
    var Data_Foreign = PS.Data_Foreign;
    var Prelude = PS.Prelude;
    var Data_Either = PS.Data_Either;
    var Data_Maybe = PS.Data_Maybe;
    var Null = {
        create: function (value) {
            return value;
        }
    };
    var runNull = function (_119) {
        return _119;
    };
    var readNull = function (_120) {
        return function (_121) {
            if (Data_Foreign.isNull(_121)) {
                return Prelude.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
            };
            return Prelude["<$>"](Data_Either.functorEither)(Prelude["<<<"](Prelude.semigroupoidArr)(Null.create)(Data_Maybe.Just.create))(_120(_121));
        };
    };
    return {
        Null: Null, 
        readNull: readNull, 
        runNull: runNull
    };
})();
var PS = PS || {};
PS.Data_Foreign_NullOrUndefined = (function () {
    "use strict";
    var Data_Foreign = PS.Data_Foreign;
    var Prelude = PS.Prelude;
    var Data_Either = PS.Data_Either;
    var Data_Maybe = PS.Data_Maybe;
    var NullOrUndefined = {
        create: function (value) {
            return value;
        }
    };
    var runNullOrUndefined = function (_122) {
        return _122;
    };
    var readNullOrUndefined = function (_123) {
        return function (_124) {
            if (Data_Foreign.isNull(_124) || Data_Foreign.isUndefined(_124)) {
                return Prelude.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
            };
            return Prelude["<$>"](Data_Either.functorEither)(Prelude["<<<"](Prelude.semigroupoidArr)(NullOrUndefined.create)(Data_Maybe.Just.create))(_123(_124));
        };
    };
    return {
        NullOrUndefined: NullOrUndefined, 
        readNullOrUndefined: readNullOrUndefined, 
        runNullOrUndefined: runNullOrUndefined
    };
})();
var PS = PS || {};
PS.Data_Foreign_Undefined = (function () {
    "use strict";
    var Data_Foreign = PS.Data_Foreign;
    var Prelude = PS.Prelude;
    var Data_Either = PS.Data_Either;
    var Data_Maybe = PS.Data_Maybe;
    var Undefined = {
        create: function (value) {
            return value;
        }
    };
    var runUndefined = function (_125) {
        return _125;
    };
    var readUndefined = function (_126) {
        return function (_127) {
            if (Data_Foreign.isUndefined(_127)) {
                return Prelude.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
            };
            return Prelude["<$>"](Data_Either.functorEither)(Prelude["<<<"](Prelude.semigroupoidArr)(Undefined.create)(Data_Maybe.Just.create))(_126(_127));
        };
    };
    return {
        Undefined: Undefined, 
        readUndefined: readUndefined, 
        runUndefined: runUndefined
    };
})();
var PS = PS || {};
PS.Data_Maybe_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var fromJust = function (_128) {
        if (_128 instanceof Data_Maybe.Just) {
            return _128.value0;
        };
        throw new Error("Failed pattern match");
    };
    return {
        fromJust: fromJust
    };
})();
var PS = PS || {};
PS.Data_Array_Unsafe = (function () {
    "use strict";
    var Prelude_Unsafe = PS.Prelude_Unsafe;
    var Data_Array = PS.Data_Array;
    var Data_Maybe_Unsafe = PS.Data_Maybe_Unsafe;
    var Prelude = PS.Prelude;
    var tail = function (_130) {
        if (_130.length >= 1) {
            var _477 = _130.slice(1);
            return _477;
        };
        throw new Error("Failed pattern match");
    };
    var last = function (xs) {
        return xs[Data_Array.length(xs) - 1];
    };
    var init = Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe_Unsafe.fromJust)(Data_Array.init);
    var head = function (_129) {
        if (_129.length >= 1) {
            var _480 = _129.slice(1);
            return _129[0];
        };
        throw new Error("Failed pattern match");
    };
    return {
        head: head, 
        init: init, 
        last: last, 
        tail: tail
    };
})();
var PS = PS || {};
PS.Data_Monoid = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Array = PS.Data_Array;
    function Monoid(__superclass_Prelude$dotSemigroup_0, mempty) {
        this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
        this.mempty = mempty;
    };
    var monoidUnit = new Monoid(function () {
        return Prelude.semigroupUnit;
    }, Prelude.unit);
    var monoidString = new Monoid(function () {
        return Prelude.semigroupString;
    }, "");
    var monoidMaybe = function (__dict_Semigroup_65) {
        return new Monoid(function () {
            return Data_Maybe.semigroupMaybe(__dict_Semigroup_65);
        }, Data_Maybe.Nothing.value);
    };
    var monoidArray = new Monoid(function () {
        return Data_Array.semigroupArray;
    }, [  ]);
    var mempty = function (dict) {
        return dict.mempty;
    };
    var monoidArr = function (__dict_Monoid_66) {
        return new Monoid(function () {
            return Prelude.semigroupArr(__dict_Monoid_66["__superclass_Prelude.Semigroup_0"]());
        }, Prelude["const"](mempty(__dict_Monoid_66)));
    };
    return {
        Monoid: Monoid, 
        mempty: mempty, 
        monoidArr: monoidArr, 
        monoidArray: monoidArray, 
        monoidMaybe: monoidMaybe, 
        monoidString: monoidString, 
        monoidUnit: monoidUnit
    };
})();
var PS = PS || {};
PS.Data_Monoid_All = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var All = {
        create: function (value) {
            return value;
        }
    };
    var showAll = new Prelude.Show(function (_136) {
        return "All (" + (Prelude.show(Prelude.showBoolean)(_136) + ")");
    });
    var semigroupAll = new Prelude.Semigroup(function (_137) {
        return function (_138) {
            return _137 && _138;
        };
    });
    var runAll = function (_131) {
        return _131;
    };
    var monoidAll = new Data_Monoid.Monoid(function () {
        return semigroupAll;
    }, true);
    var eqAll = new Prelude.Eq(function (_134) {
        return function (_135) {
            return _134 !== _135;
        };
    }, function (_132) {
        return function (_133) {
            return _132 === _133;
        };
    });
    return {
        All: All, 
        eqAll: eqAll, 
        monoidAll: monoidAll, 
        runAll: runAll, 
        semigroupAll: semigroupAll, 
        showAll: showAll
    };
})();
var PS = PS || {};
PS.Data_Monoid_Any = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Any = {
        create: function (value) {
            return value;
        }
    };
    var showAny = new Prelude.Show(function (_144) {
        return "Any (" + (Prelude.show(Prelude.showBoolean)(_144) + ")");
    });
    var semigroupAny = new Prelude.Semigroup(function (_145) {
        return function (_146) {
            return _145 || _146;
        };
    });
    var runAny = function (_139) {
        return _139;
    };
    var monoidAny = new Data_Monoid.Monoid(function () {
        return semigroupAny;
    }, false);
    var eqAny = new Prelude.Eq(function (_142) {
        return function (_143) {
            return _142 !== _143;
        };
    }, function (_140) {
        return function (_141) {
            return _140 === _141;
        };
    });
    return {
        Any: Any, 
        eqAny: eqAny, 
        monoidAny: monoidAny, 
        runAny: runAny, 
        semigroupAny: semigroupAny, 
        showAny: showAny
    };
})();
var PS = PS || {};
PS.Data_Monoid_Dual = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Dual = {
        create: function (value) {
            return value;
        }
    };
    var showDual = function (__dict_Show_67) {
        return new Prelude.Show(function (_154) {
            return "Dual (" + (Prelude.show(__dict_Show_67)(_154) + ")");
        });
    };
    var semigroupDual = function (__dict_Semigroup_68) {
        return new Prelude.Semigroup(function (_155) {
            return function (_156) {
                return Prelude["<>"](__dict_Semigroup_68)(_156)(_155);
            };
        });
    };
    var runDual = function (_147) {
        return _147;
    };
    var monoidDual = function (__dict_Monoid_70) {
        return new Data_Monoid.Monoid(function () {
            return semigroupDual(__dict_Monoid_70["__superclass_Prelude.Semigroup_0"]());
        }, Data_Monoid.mempty(__dict_Monoid_70));
    };
    var eqDual = function (__dict_Eq_71) {
        return new Prelude.Eq(function (_150) {
            return function (_151) {
                return Prelude["/="](__dict_Eq_71)(_150)(_151);
            };
        }, function (_148) {
            return function (_149) {
                return Prelude["=="](__dict_Eq_71)(_148)(_149);
            };
        });
    };
    var ordDual = function (__dict_Ord_69) {
        return new Prelude.Ord(function () {
            return eqDual(__dict_Ord_69["__superclass_Prelude.Eq_0"]());
        }, function (_152) {
            return function (_153) {
                return Prelude.compare(__dict_Ord_69)(_152)(_153);
            };
        });
    };
    return {
        Dual: Dual, 
        eqDual: eqDual, 
        monoidDual: monoidDual, 
        ordDual: ordDual, 
        runDual: runDual, 
        semigroupDual: semigroupDual, 
        showDual: showDual
    };
})();
var PS = PS || {};
PS.Data_Monoid_Endo = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Endo = {
        create: function (value) {
            return value;
        }
    };
    var semigroupEndo = new Prelude.Semigroup(function (_158) {
        return function (_159) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(_158)(_159);
        };
    });
    var runEndo = function (_157) {
        return _157;
    };
    var monoidEndo = new Data_Monoid.Monoid(function () {
        return semigroupEndo;
    }, Prelude.id(Prelude.categoryArr));
    return {
        Endo: Endo, 
        monoidEndo: monoidEndo, 
        runEndo: runEndo, 
        semigroupEndo: semigroupEndo
    };
})();
var PS = PS || {};
PS.Data_Monoid_Product = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Product = {
        create: function (value) {
            return value;
        }
    };
    var showProduct = new Prelude.Show(function (_167) {
        return "Product (" + (Prelude.show(Prelude.showNumber)(_167) + ")");
    });
    var semigroupProduct = new Prelude.Semigroup(function (_168) {
        return function (_169) {
            return _168 * _169;
        };
    });
    var runProduct = function (_160) {
        return _160;
    };
    var monoidProduct = new Data_Monoid.Monoid(function () {
        return semigroupProduct;
    }, 1);
    var eqProduct = new Prelude.Eq(function (_163) {
        return function (_164) {
            return _163 !== _164;
        };
    }, function (_161) {
        return function (_162) {
            return _161 === _162;
        };
    });
    var ordProduct = new Prelude.Ord(function () {
        return eqProduct;
    }, function (_165) {
        return function (_166) {
            return Prelude.compare(Prelude.ordNumber)(_165)(_166);
        };
    });
    return {
        Product: Product, 
        eqProduct: eqProduct, 
        monoidProduct: monoidProduct, 
        ordProduct: ordProduct, 
        runProduct: runProduct, 
        semigroupProduct: semigroupProduct, 
        showProduct: showProduct
    };
})();
var PS = PS || {};
PS.Data_Monoid_Sum = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Sum = {
        create: function (value) {
            return value;
        }
    };
    var showSum = new Prelude.Show(function (_177) {
        return "Sum (" + (Prelude.show(Prelude.showNumber)(_177) + ")");
    });
    var semigroupSum = new Prelude.Semigroup(function (_178) {
        return function (_179) {
            return _178 + _179;
        };
    });
    var runSum = function (_170) {
        return _170;
    };
    var monoidSum = new Data_Monoid.Monoid(function () {
        return semigroupSum;
    }, 0);
    var eqSum = new Prelude.Eq(function (_173) {
        return function (_174) {
            return _173 !== _174;
        };
    }, function (_171) {
        return function (_172) {
            return _171 === _172;
        };
    });
    var ordSum = new Prelude.Ord(function () {
        return eqSum;
    }, function (_175) {
        return function (_176) {
            return Prelude.compare(Prelude.ordNumber)(_175)(_176);
        };
    });
    return {
        Sum: Sum, 
        eqSum: eqSum, 
        monoidSum: monoidSum, 
        ordSum: ordSum, 
        runSum: runSum, 
        semigroupSum: semigroupSum, 
        showSum: showSum
    };
})();
var PS = PS || {};
PS.Data_Tuple = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Lazy = PS.Control_Lazy;
    var Data_Array = PS.Data_Array;
    var Control_Extend = PS.Control_Extend;
    var Control_Comonad = PS.Control_Comonad;
    function Tuple(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Tuple.create = function (value0) {
        return function (value1) {
            return new Tuple(value0, value1);
        };
    };
    var zip = Data_Array.zipWith(Tuple.create);
    var unzip = function (_184) {
        if (_184.length >= 1) {
            var _537 = _184.slice(1);
            var _531 = unzip(_537);
            return new Tuple(Prelude[":"]((_184[0]).value0)(_531.value0), Prelude[":"]((_184[0]).value1)(_531.value1));
        };
        if (_184.length === 0) {
            return new Tuple([  ], [  ]);
        };
        throw new Error("Failed pattern match");
    };
    var uncurry = function (_182) {
        return function (_183) {
            return _182(_183.value0)(_183.value1);
        };
    };
    var swap = function (_185) {
        return new Tuple(_185.value1, _185.value0);
    };
    var snd = function (_181) {
        return _181.value1;
    };
    var showTuple = function (__dict_Show_72) {
        return function (__dict_Show_73) {
            return new Prelude.Show(function (_186) {
                return "Tuple (" + (Prelude.show(__dict_Show_72)(_186.value0) + (") (" + (Prelude.show(__dict_Show_73)(_186.value1) + ")")));
            });
        };
    };
    var semigroupoidTuple = new Prelude.Semigroupoid(function (_191) {
        return function (_192) {
            return new Tuple(_192.value0, _191.value1);
        };
    });
    var semigroupTuple = function (__dict_Semigroup_74) {
        return function (__dict_Semigroup_75) {
            return new Prelude.Semigroup(function (_193) {
                return function (_194) {
                    return new Tuple(Prelude["<>"](__dict_Semigroup_74)(_193.value0)(_194.value0), Prelude["<>"](__dict_Semigroup_75)(_193.value1)(_194.value1));
                };
            });
        };
    };
    var monoidTuple = function (__dict_Monoid_78) {
        return function (__dict_Monoid_79) {
            return new Data_Monoid.Monoid(function () {
                return semigroupTuple(__dict_Monoid_78["__superclass_Prelude.Semigroup_0"]())(__dict_Monoid_79["__superclass_Prelude.Semigroup_0"]());
            }, new Tuple(Data_Monoid.mempty(__dict_Monoid_78), Data_Monoid.mempty(__dict_Monoid_79)));
        };
    };
    var functorTuple = new Prelude.Functor(function (_195) {
        return function (_196) {
            return new Tuple(_196.value0, _195(_196.value1));
        };
    });
    var fst = function (_180) {
        return _180.value0;
    };
    var lazyLazy1Tuple = function (__dict_Lazy1_81) {
        return function (__dict_Lazy1_82) {
            return new Control_Lazy.Lazy(function (f) {
                return new Tuple(Control_Lazy.defer1(__dict_Lazy1_81)(function (_) {
                    return fst(f(Prelude.unit));
                }), Control_Lazy.defer1(__dict_Lazy1_82)(function (_) {
                    return snd(f(Prelude.unit));
                }));
            });
        };
    };
    var lazyLazy2Tuple = function (__dict_Lazy2_83) {
        return function (__dict_Lazy2_84) {
            return new Control_Lazy.Lazy(function (f) {
                return new Tuple(Control_Lazy.defer2(__dict_Lazy2_83)(function (_) {
                    return fst(f(Prelude.unit));
                }), Control_Lazy.defer2(__dict_Lazy2_84)(function (_) {
                    return snd(f(Prelude.unit));
                }));
            });
        };
    };
    var lazyTuple = function (__dict_Lazy_85) {
        return function (__dict_Lazy_86) {
            return new Control_Lazy.Lazy(function (f) {
                return new Tuple(Control_Lazy.defer(__dict_Lazy_85)(function (_) {
                    return fst(f(Prelude.unit));
                }), Control_Lazy.defer(__dict_Lazy_86)(function (_) {
                    return snd(f(Prelude.unit));
                }));
            });
        };
    };
    var extendTuple = new Control_Extend.Extend(function (_201) {
        return function (_202) {
            return new Tuple(_202.value0, _201(_202));
        };
    }, function () {
        return functorTuple;
    });
    var eqTuple = function (__dict_Eq_87) {
        return function (__dict_Eq_88) {
            return new Prelude.Eq(function (t1) {
                return function (t2) {
                    return !Prelude["=="](eqTuple(__dict_Eq_87)(__dict_Eq_88))(t1)(t2);
                };
            }, function (_187) {
                return function (_188) {
                    return Prelude["=="](__dict_Eq_87)(_187.value0)(_188.value0) && Prelude["=="](__dict_Eq_88)(_187.value1)(_188.value1);
                };
            });
        };
    };
    var ordTuple = function (__dict_Ord_76) {
        return function (__dict_Ord_77) {
            return new Prelude.Ord(function () {
                return eqTuple(__dict_Ord_76["__superclass_Prelude.Eq_0"]())(__dict_Ord_77["__superclass_Prelude.Eq_0"]());
            }, function (_189) {
                return function (_190) {
                    var _582 = Prelude.compare(__dict_Ord_76)(_189.value0)(_190.value0);
                    if (_582 instanceof Prelude.EQ) {
                        return Prelude.compare(__dict_Ord_77)(_189.value1)(_190.value1);
                    };
                    return _582;
                };
            });
        };
    };
    var curry = function (f) {
        return function (a) {
            return function (b) {
                return f(new Tuple(a, b));
            };
        };
    };
    var comonadTuple = new Control_Comonad.Comonad(function () {
        return extendTuple;
    }, snd);
    var applyTuple = function (__dict_Semigroup_90) {
        return new Prelude.Apply(function (_197) {
            return function (_198) {
                return new Tuple(Prelude["<>"](__dict_Semigroup_90)(_197.value0)(_198.value0), _197.value1(_198.value1));
            };
        }, function () {
            return functorTuple;
        });
    };
    var bindTuple = function (__dict_Semigroup_89) {
        return new Prelude.Bind(function (_199) {
            return function (_200) {
                var _595 = _200(_199.value1);
                return new Tuple(Prelude["<>"](__dict_Semigroup_89)(_199.value0)(_595.value0), _595.value1);
            };
        }, function () {
            return applyTuple(__dict_Semigroup_89);
        });
    };
    var applicativeTuple = function (__dict_Monoid_91) {
        return new Prelude.Applicative(function () {
            return applyTuple(__dict_Monoid_91["__superclass_Prelude.Semigroup_0"]());
        }, Tuple.create(Data_Monoid.mempty(__dict_Monoid_91)));
    };
    var monadTuple = function (__dict_Monoid_80) {
        return new Prelude.Monad(function () {
            return applicativeTuple(__dict_Monoid_80);
        }, function () {
            return bindTuple(__dict_Monoid_80["__superclass_Prelude.Semigroup_0"]());
        });
    };
    return {
        Tuple: Tuple, 
        applicativeTuple: applicativeTuple, 
        applyTuple: applyTuple, 
        bindTuple: bindTuple, 
        comonadTuple: comonadTuple, 
        curry: curry, 
        eqTuple: eqTuple, 
        extendTuple: extendTuple, 
        fst: fst, 
        functorTuple: functorTuple, 
        lazyLazy1Tuple: lazyLazy1Tuple, 
        lazyLazy2Tuple: lazyLazy2Tuple, 
        lazyTuple: lazyTuple, 
        monadTuple: monadTuple, 
        monoidTuple: monoidTuple, 
        ordTuple: ordTuple, 
        semigroupTuple: semigroupTuple, 
        semigroupoidTuple: semigroupoidTuple, 
        showTuple: showTuple, 
        snd: snd, 
        swap: swap, 
        uncurry: uncurry, 
        unzip: unzip, 
        zip: zip
    };
})();
var PS = PS || {};
PS.Data_Tuple_Nested = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Tuple = PS.Data_Tuple;
    var $div$bslash = function (a) {
        return function (b) {
            return new Data_Tuple.Tuple(a, b);
        };
    };
    var con9 = function (f) {
        return function (_210) {
            return f(_210.value0)(_210.value1.value0)(_210.value1.value1.value0)(_210.value1.value1.value1.value0)(_210.value1.value1.value1.value1.value0)(_210.value1.value1.value1.value1.value1.value0)(_210.value1.value1.value1.value1.value1.value1.value0)(_210.value1.value1.value1.value1.value1.value1.value1.value0)(_210.value1.value1.value1.value1.value1.value1.value1.value1);
        };
    };
    var con8 = function (f) {
        return function (_209) {
            return f(_209.value0)(_209.value1.value0)(_209.value1.value1.value0)(_209.value1.value1.value1.value0)(_209.value1.value1.value1.value1.value0)(_209.value1.value1.value1.value1.value1.value0)(_209.value1.value1.value1.value1.value1.value1.value0)(_209.value1.value1.value1.value1.value1.value1.value1);
        };
    };
    var con7 = function (f) {
        return function (_208) {
            return f(_208.value0)(_208.value1.value0)(_208.value1.value1.value0)(_208.value1.value1.value1.value0)(_208.value1.value1.value1.value1.value0)(_208.value1.value1.value1.value1.value1.value0)(_208.value1.value1.value1.value1.value1.value1);
        };
    };
    var con6 = function (f) {
        return function (_207) {
            return f(_207.value0)(_207.value1.value0)(_207.value1.value1.value0)(_207.value1.value1.value1.value0)(_207.value1.value1.value1.value1.value0)(_207.value1.value1.value1.value1.value1);
        };
    };
    var con5 = function (f) {
        return function (_206) {
            return f(_206.value0)(_206.value1.value0)(_206.value1.value1.value0)(_206.value1.value1.value1.value0)(_206.value1.value1.value1.value1);
        };
    };
    var con4 = function (f) {
        return function (_205) {
            return f(_205.value0)(_205.value1.value0)(_205.value1.value1.value0)(_205.value1.value1.value1);
        };
    };
    var con3 = function (f) {
        return function (_204) {
            return f(_204.value0)(_204.value1.value0)(_204.value1.value1);
        };
    };
    var con2 = function (f) {
        return function (_203) {
            return f(_203.value0)(_203.value1);
        };
    };
    var con10 = function (f) {
        return function (_211) {
            return f(_211.value0)(_211.value1.value0)(_211.value1.value1.value0)(_211.value1.value1.value1.value0)(_211.value1.value1.value1.value1.value0)(_211.value1.value1.value1.value1.value1.value0)(_211.value1.value1.value1.value1.value1.value1.value0)(_211.value1.value1.value1.value1.value1.value1.value1.value0)(_211.value1.value1.value1.value1.value1.value1.value1.value1.value0)(_211.value1.value1.value1.value1.value1.value1.value1.value1.value1);
        };
    };
    return {
        "/\\": $div$bslash, 
        con10: con10, 
        con2: con2, 
        con3: con3, 
        con4: con4, 
        con5: con5, 
        con6: con6, 
        con7: con7, 
        con8: con8, 
        con9: con9
    };
})();
var PS = PS || {};
PS.Data_Monoid_First = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid = PS.Data_Monoid;
    var First = {
        create: function (value) {
            return value;
        }
    };
    var showFirst = function (__dict_Show_92) {
        return new Prelude.Show(function (_219) {
            return "First (" + (Prelude.show(Data_Maybe.showMaybe(__dict_Show_92))(_219) + ")");
        });
    };
    var semigroupFirst = new Prelude.Semigroup(function (_220) {
        return function (_221) {
            if (_220 instanceof Data_Maybe.Just) {
                return _220;
            };
            return _221;
        };
    });
    var runFirst = function (_212) {
        return _212;
    };
    var monoidFirst = new Data_Monoid.Monoid(function () {
        return semigroupFirst;
    }, Data_Maybe.Nothing.value);
    var eqFirst = function (__dict_Eq_94) {
        return new Prelude.Eq(function (_215) {
            return function (_216) {
                return Prelude["/="](Data_Maybe.eqMaybe(__dict_Eq_94))(_215)(_216);
            };
        }, function (_213) {
            return function (_214) {
                return Prelude["=="](Data_Maybe.eqMaybe(__dict_Eq_94))(_213)(_214);
            };
        });
    };
    var ordFirst = function (__dict_Ord_93) {
        return new Prelude.Ord(function () {
            return eqFirst(__dict_Ord_93["__superclass_Prelude.Eq_0"]());
        }, function (_217) {
            return function (_218) {
                return Prelude.compare(Data_Maybe.ordMaybe(__dict_Ord_93))(_217)(_218);
            };
        });
    };
    return {
        First: First, 
        eqFirst: eqFirst, 
        monoidFirst: monoidFirst, 
        ordFirst: ordFirst, 
        runFirst: runFirst, 
        semigroupFirst: semigroupFirst, 
        showFirst: showFirst
    };
})();
var PS = PS || {};
PS.Data_Foldable = (function () {
    "use strict";
    var Data_Monoid = PS.Data_Monoid;
    var Prelude = PS.Prelude;
    var Control_Apply = PS.Control_Apply;
    var Data_Monoid_First = PS.Data_Monoid_First;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Either = PS.Data_Either;
    function Foldable(foldMap, foldl, foldr) {
        this.foldMap = foldMap;
        this.foldl = foldl;
        this.foldr = foldr;
    };
    
  function foldrArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = xs.length - 1; i >= 0; --i) {
          acc = f(xs[i])(acc);
        }
        return acc;
      }
    }
  };
    
  function foldlArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = 0, len = xs.length; i < len; ++i) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      }
    }
  };
    var foldr = function (dict) {
        return dict.foldr;
    };
    var traverse_ = function (__dict_Applicative_95) {
        return function (__dict_Foldable_96) {
            return function (f) {
                return foldr(__dict_Foldable_96)(Prelude["<<<"](Prelude.semigroupoidArr)(Control_Apply["*>"](__dict_Applicative_95["__superclass_Prelude.Apply_0"]()))(f))(Prelude.pure(__dict_Applicative_95)(Prelude.unit));
            };
        };
    };
    var for_ = function (__dict_Applicative_97) {
        return function (__dict_Foldable_98) {
            return Prelude.flip(traverse_(__dict_Applicative_97)(__dict_Foldable_98));
        };
    };
    var sequence_ = function (__dict_Applicative_99) {
        return function (__dict_Foldable_100) {
            return traverse_(__dict_Applicative_99)(__dict_Foldable_100)(Prelude.id(Prelude.categoryArr));
        };
    };
    var foldl = function (dict) {
        return dict.foldl;
    };
    var intercalate = function (__dict_Foldable_101) {
        return function (__dict_Monoid_102) {
            return function (sep) {
                return function (xs) {
                    var go = function (_247) {
                        return function (_248) {
                            if (_247.init) {
                                return {
                                    init: false, 
                                    acc: _248
                                };
                            };
                            return {
                                init: false, 
                                acc: Prelude["<>"](__dict_Monoid_102["__superclass_Prelude.Semigroup_0"]())(_247.acc)(Prelude["<>"](__dict_Monoid_102["__superclass_Prelude.Semigroup_0"]())(sep)(_248))
                            };
                        };
                    };
                    return (foldl(__dict_Foldable_101)(go)({
                        init: true, 
                        acc: Data_Monoid.mempty(__dict_Monoid_102)
                    })(xs)).acc;
                };
            };
        };
    };
    var mconcat = function (__dict_Foldable_103) {
        return function (__dict_Monoid_104) {
            return foldl(__dict_Foldable_103)(Prelude["<>"](__dict_Monoid_104["__superclass_Prelude.Semigroup_0"]()))(Data_Monoid.mempty(__dict_Monoid_104));
        };
    };
    var or = function (__dict_Foldable_105) {
        return foldl(__dict_Foldable_105)(Prelude["||"](Prelude.boolLikeBoolean))(false);
    };
    var product = function (__dict_Foldable_106) {
        return foldl(__dict_Foldable_106)(Prelude["*"](Prelude.numNumber))(1);
    };
    var sum = function (__dict_Foldable_107) {
        return foldl(__dict_Foldable_107)(Prelude["+"](Prelude.numNumber))(0);
    };
    var foldableTuple = new Foldable(function (__dict_Monoid_108) {
        return function (_245) {
            return function (_246) {
                return _245(_246.value1);
            };
        };
    }, function (_242) {
        return function (_243) {
            return function (_244) {
                return _242(_243)(_244.value1);
            };
        };
    }, function (_239) {
        return function (_240) {
            return function (_241) {
                return _239(_241.value1)(_240);
            };
        };
    });
    var foldableMaybe = new Foldable(function (__dict_Monoid_109) {
        return function (_237) {
            return function (_238) {
                if (_238 instanceof Data_Maybe.Nothing) {
                    return Data_Monoid.mempty(__dict_Monoid_109);
                };
                if (_238 instanceof Data_Maybe.Just) {
                    return _237(_238.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (_234) {
        return function (_235) {
            return function (_236) {
                if (_236 instanceof Data_Maybe.Nothing) {
                    return _235;
                };
                if (_236 instanceof Data_Maybe.Just) {
                    return _234(_235)(_236.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (_231) {
        return function (_232) {
            return function (_233) {
                if (_233 instanceof Data_Maybe.Nothing) {
                    return _232;
                };
                if (_233 instanceof Data_Maybe.Just) {
                    return _231(_233.value0)(_232);
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var foldableEither = new Foldable(function (__dict_Monoid_110) {
        return function (_229) {
            return function (_230) {
                if (_230 instanceof Data_Either.Left) {
                    return Data_Monoid.mempty(__dict_Monoid_110);
                };
                if (_230 instanceof Data_Either.Right) {
                    return _229(_230.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (_226) {
        return function (_227) {
            return function (_228) {
                if (_228 instanceof Data_Either.Left) {
                    return _227;
                };
                if (_228 instanceof Data_Either.Right) {
                    return _226(_227)(_228.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (_223) {
        return function (_224) {
            return function (_225) {
                if (_225 instanceof Data_Either.Left) {
                    return _224;
                };
                if (_225 instanceof Data_Either.Right) {
                    return _223(_225.value0)(_224);
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var foldableArray = new Foldable(function (__dict_Monoid_111) {
        return function (f) {
            return function (xs) {
                return foldr(foldableArray)(function (x) {
                    return function (acc) {
                        return Prelude["<>"](__dict_Monoid_111["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                    };
                })(Data_Monoid.mempty(__dict_Monoid_111))(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldlArray(f)(z)(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldrArray(f)(z)(xs);
            };
        };
    });
    var foldMap = function (dict) {
        return dict.foldMap;
    };
    var lookup = function (__dict_Eq_112) {
        return function (__dict_Foldable_113) {
            return function (a) {
                return function (f) {
                    return Data_Monoid_First.runFirst(foldMap(__dict_Foldable_113)(Data_Monoid_First.monoidFirst)(function (_222) {
                        return Prelude["=="](__dict_Eq_112)(a)(_222.value0) ? new Data_Maybe.Just(_222.value1) : Data_Maybe.Nothing.value;
                    })(f));
                };
            };
        };
    };
    var fold = function (__dict_Foldable_114) {
        return function (__dict_Monoid_115) {
            return foldMap(__dict_Foldable_114)(__dict_Monoid_115)(Prelude.id(Prelude.categoryArr));
        };
    };
    var find = function (__dict_Foldable_116) {
        return function (p) {
            return function (f) {
                var _756 = foldMap(__dict_Foldable_116)(Data_Monoid.monoidArray)(function (x) {
                    return p(x) ? [ x ] : [  ];
                })(f);
                if (_756.length >= 1) {
                    var _758 = _756.slice(1);
                    return new Data_Maybe.Just(_756[0]);
                };
                if (_756.length === 0) {
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var any = function (__dict_Foldable_117) {
        return function (p) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(or(foldableArray))(foldMap(__dict_Foldable_117)(Data_Monoid.monoidArray)(function (x) {
                return [ p(x) ];
            }));
        };
    };
    var elem = function (__dict_Eq_118) {
        return function (__dict_Foldable_119) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(any(__dict_Foldable_119))(Prelude["=="](__dict_Eq_118));
        };
    };
    var notElem = function (__dict_Eq_120) {
        return function (__dict_Foldable_121) {
            return function (x) {
                return Prelude["<<<"](Prelude.semigroupoidArr)(Prelude.not(Prelude.boolLikeBoolean))(elem(__dict_Eq_120)(__dict_Foldable_121)(x));
            };
        };
    };
    var and = function (__dict_Foldable_122) {
        return foldl(__dict_Foldable_122)(Prelude["&&"](Prelude.boolLikeBoolean))(true);
    };
    var all = function (__dict_Foldable_123) {
        return function (p) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(and(foldableArray))(foldMap(__dict_Foldable_123)(Data_Monoid.monoidArray)(function (x) {
                return [ p(x) ];
            }));
        };
    };
    return {
        Foldable: Foldable, 
        all: all, 
        and: and, 
        any: any, 
        elem: elem, 
        find: find, 
        fold: fold, 
        foldMap: foldMap, 
        foldableArray: foldableArray, 
        foldableEither: foldableEither, 
        foldableMaybe: foldableMaybe, 
        foldableTuple: foldableTuple, 
        foldl: foldl, 
        foldlArray: foldlArray, 
        foldr: foldr, 
        foldrArray: foldrArray, 
        for_: for_, 
        intercalate: intercalate, 
        lookup: lookup, 
        mconcat: mconcat, 
        notElem: notElem, 
        or: or, 
        product: product, 
        sequence_: sequence_, 
        sum: sum, 
        traverse_: traverse_
    };
})();
var PS = PS || {};
PS.Data_Monoid_Last = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid = PS.Data_Monoid;
    var Last = {
        create: function (value) {
            return value;
        }
    };
    var showLast = function (__dict_Show_124) {
        return new Prelude.Show(function (_256) {
            return "Last (" + (Prelude.show(Data_Maybe.showMaybe(__dict_Show_124))(_256) + ")");
        });
    };
    var semigroupLast = new Prelude.Semigroup(function (_257) {
        return function (_258) {
            if (_258 instanceof Data_Maybe.Just) {
                return _258;
            };
            if (_258 instanceof Data_Maybe.Nothing) {
                return _257;
            };
            throw new Error("Failed pattern match");
        };
    });
    var runLast = function (_249) {
        return _249;
    };
    var monoidLast = new Data_Monoid.Monoid(function () {
        return semigroupLast;
    }, Data_Maybe.Nothing.value);
    var eqLast = function (__dict_Eq_126) {
        return new Prelude.Eq(function (_252) {
            return function (_253) {
                return Prelude["/="](Data_Maybe.eqMaybe(__dict_Eq_126))(_252)(_253);
            };
        }, function (_250) {
            return function (_251) {
                return Prelude["=="](Data_Maybe.eqMaybe(__dict_Eq_126))(_250)(_251);
            };
        });
    };
    var ordLast = function (__dict_Ord_125) {
        return new Prelude.Ord(function () {
            return eqLast(__dict_Ord_125["__superclass_Prelude.Eq_0"]());
        }, function (_254) {
            return function (_255) {
                return Prelude.compare(Data_Maybe.ordMaybe(__dict_Ord_125))(_254)(_255);
            };
        });
    };
    return {
        Last: Last, 
        eqLast: eqLast, 
        monoidLast: monoidLast, 
        ordLast: ordLast, 
        runLast: runLast, 
        semigroupLast: semigroupLast, 
        showLast: showLast
    };
})();
var PS = PS || {};
PS.Data_Traversable = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Either = PS.Data_Either;
    var StateR = {
        create: function (value) {
            return value;
        }
    };
    var StateL = {
        create: function (value) {
            return value;
        }
    };
    function Traversable(__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
        this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
        this.sequence = sequence;
        this.traverse = traverse;
    };
    var traverse = function (dict) {
        return dict.traverse;
    };
    var traversableTuple = new Traversable(function () {
        return Data_Foldable.foldableTuple;
    }, function () {
        return Data_Tuple.functorTuple;
    }, function (__dict_Applicative_128) {
        return function (_272) {
            return Prelude["<$>"]((__dict_Applicative_128["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.Tuple.create(_272.value0))(_272.value1);
        };
    }, function (__dict_Applicative_127) {
        return function (_270) {
            return function (_271) {
                return Prelude["<$>"]((__dict_Applicative_127["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.Tuple.create(_271.value0))(_270(_271.value1));
            };
        };
    });
    var traversableMaybe = new Traversable(function () {
        return Data_Foldable.foldableMaybe;
    }, function () {
        return Data_Maybe.functorMaybe;
    }, function (__dict_Applicative_130) {
        return function (_269) {
            if (_269 instanceof Data_Maybe.Nothing) {
                return Prelude.pure(__dict_Applicative_130)(Data_Maybe.Nothing.value);
            };
            if (_269 instanceof Data_Maybe.Just) {
                return Prelude["<$>"]((__dict_Applicative_130["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(_269.value0);
            };
            throw new Error("Failed pattern match");
        };
    }, function (__dict_Applicative_129) {
        return function (_267) {
            return function (_268) {
                if (_268 instanceof Data_Maybe.Nothing) {
                    return Prelude.pure(__dict_Applicative_129)(Data_Maybe.Nothing.value);
                };
                if (_268 instanceof Data_Maybe.Just) {
                    return Prelude["<$>"]((__dict_Applicative_129["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(_267(_268.value0));
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var traversableEither = new Traversable(function () {
        return Data_Foldable.foldableEither;
    }, function () {
        return Data_Either.functorEither;
    }, function (__dict_Applicative_132) {
        return function (_266) {
            if (_266 instanceof Data_Either.Left) {
                return Prelude.pure(__dict_Applicative_132)(new Data_Either.Left(_266.value0));
            };
            if (_266 instanceof Data_Either.Right) {
                return Prelude["<$>"]((__dict_Applicative_132["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Either.Right.create)(_266.value0);
            };
            throw new Error("Failed pattern match");
        };
    }, function (__dict_Applicative_131) {
        return function (_264) {
            return function (_265) {
                if (_265 instanceof Data_Either.Left) {
                    return Prelude.pure(__dict_Applicative_131)(new Data_Either.Left(_265.value0));
                };
                if (_265 instanceof Data_Either.Right) {
                    return Prelude["<$>"]((__dict_Applicative_131["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Either.Right.create)(_264(_265.value0));
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var stateR = function (_260) {
        return _260;
    };
    var stateL = function (_259) {
        return _259;
    };
    var sequence = function (dict) {
        return dict.sequence;
    };
    var traversableArray = new Traversable(function () {
        return Data_Foldable.foldableArray;
    }, function () {
        return Data_Array.functorArray;
    }, function (__dict_Applicative_134) {
        return function (_263) {
            if (_263.length === 0) {
                return Prelude.pure(__dict_Applicative_134)([  ]);
            };
            if (_263.length >= 1) {
                var _793 = _263.slice(1);
                return Prelude["<*>"](__dict_Applicative_134["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_134["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(_263[0]))(sequence(traversableArray)(__dict_Applicative_134)(_793));
            };
            throw new Error("Failed pattern match");
        };
    }, function (__dict_Applicative_133) {
        return function (_261) {
            return function (_262) {
                if (_262.length === 0) {
                    return Prelude.pure(__dict_Applicative_133)([  ]);
                };
                if (_262.length >= 1) {
                    var _797 = _262.slice(1);
                    return Prelude["<*>"](__dict_Applicative_133["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_133["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(_261(_262[0])))(traverse(traversableArray)(__dict_Applicative_133)(_261)(_797));
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var zipWithA = function (__dict_Applicative_135) {
        return function (f) {
            return function (xs) {
                return function (ys) {
                    return sequence(traversableArray)(__dict_Applicative_135)(Data_Array.zipWith(f)(xs)(ys));
                };
            };
        };
    };
    var functorStateR = new Prelude.Functor(function (f) {
        return function (k) {
            return StateR.create(function (s) {
                var _798 = stateR(k)(s);
                return new Data_Tuple.Tuple(_798.value0, f(_798.value1));
            });
        };
    });
    var functorStateL = new Prelude.Functor(function (f) {
        return function (k) {
            return StateL.create(function (s) {
                var _801 = stateL(k)(s);
                return new Data_Tuple.Tuple(_801.value0, f(_801.value1));
            });
        };
    });
    var $$for = function (__dict_Applicative_140) {
        return function (__dict_Traversable_141) {
            return function (x) {
                return function (f) {
                    return traverse(__dict_Traversable_141)(__dict_Applicative_140)(f)(x);
                };
            };
        };
    };
    var applyStateR = new Prelude.Apply(function (f) {
        return function (x) {
            return StateR.create(function (s) {
                var _804 = stateR(x)(s);
                var _805 = stateR(f)(_804.value0);
                return new Data_Tuple.Tuple(_805.value0, _805.value1(_804.value1));
            });
        };
    }, function () {
        return functorStateR;
    });
    var applyStateL = new Prelude.Apply(function (f) {
        return function (x) {
            return StateL.create(function (s) {
                var _810 = stateL(f)(s);
                var _811 = stateL(x)(_810.value0);
                return new Data_Tuple.Tuple(_811.value0, _810.value1(_811.value1));
            });
        };
    }, function () {
        return functorStateL;
    });
    var applicativeStateR = new Prelude.Applicative(function () {
        return applyStateR;
    }, function (a) {
        return StateR.create(function (s) {
            return new Data_Tuple.Tuple(s, a);
        });
    });
    var mapAccumR = function (__dict_Traversable_136) {
        return function (f) {
            return function (s0) {
                return function (xs) {
                    return stateR(traverse(__dict_Traversable_136)(applicativeStateR)(function (a) {
                        return StateR.create(function (s) {
                            return f(s)(a);
                        });
                    })(xs))(s0);
                };
            };
        };
    };
    var scanr = function (__dict_Traversable_137) {
        return function (f) {
            return function (b0) {
                return function (xs) {
                    return Data_Tuple.snd(mapAccumR(__dict_Traversable_137)(function (b) {
                        return function (a) {
                            var b$prime = f(a)(b);
                            return new Data_Tuple.Tuple(b$prime, b$prime);
                        };
                    })(b0)(xs));
                };
            };
        };
    };
    var applicativeStateL = new Prelude.Applicative(function () {
        return applyStateL;
    }, function (a) {
        return StateL.create(function (s) {
            return new Data_Tuple.Tuple(s, a);
        });
    });
    var mapAccumL = function (__dict_Traversable_138) {
        return function (f) {
            return function (s0) {
                return function (xs) {
                    return stateL(traverse(__dict_Traversable_138)(applicativeStateL)(function (a) {
                        return StateL.create(function (s) {
                            return f(s)(a);
                        });
                    })(xs))(s0);
                };
            };
        };
    };
    var scanl = function (__dict_Traversable_139) {
        return function (f) {
            return function (b0) {
                return function (xs) {
                    return Data_Tuple.snd(mapAccumL(__dict_Traversable_139)(function (b) {
                        return function (a) {
                            var b$prime = f(b)(a);
                            return new Data_Tuple.Tuple(b$prime, b$prime);
                        };
                    })(b0)(xs));
                };
            };
        };
    };
    return {
        Traversable: Traversable, 
        "for": $$for, 
        mapAccumL: mapAccumL, 
        mapAccumR: mapAccumR, 
        scanl: scanl, 
        scanr: scanr, 
        sequence: sequence, 
        traversableArray: traversableArray, 
        traversableEither: traversableEither, 
        traversableMaybe: traversableMaybe, 
        traversableTuple: traversableTuple, 
        traverse: traverse, 
        zipWithA: zipWithA
    };
})();
var PS = PS || {};
PS.Data_Foreign_Class = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Foreign = PS.Data_Foreign;
    var Data_Traversable = PS.Data_Traversable;
    var Data_Array = PS.Data_Array;
    var Data_Foreign_Null = PS.Data_Foreign_Null;
    var Data_Foreign_Undefined = PS.Data_Foreign_Undefined;
    var Data_Foreign_NullOrUndefined = PS.Data_Foreign_NullOrUndefined;
    var Data_Either = PS.Data_Either;
    var Data_Foreign_Index = PS.Data_Foreign_Index;
    function IsForeign(read) {
        this.read = read;
    };
    var stringIsForeign = new IsForeign(Data_Foreign.readString);
    var read = function (dict) {
        return dict.read;
    };
    var readJSON = function (__dict_IsForeign_142) {
        return function (json) {
            return Prelude[">>="](Data_Either.bindEither)(Data_Foreign.parseJSON(json))(read(__dict_IsForeign_142));
        };
    };
    var readWith = function (__dict_IsForeign_143) {
        return function (f) {
            return function (value) {
                return Data_Either.either(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Either.Left.create)(f))(Data_Either.Right.create)(read(__dict_IsForeign_143)(value));
            };
        };
    };
    var readProp = function (__dict_IsForeign_144) {
        return function (__dict_Index_145) {
            return function (prop) {
                return function (value) {
                    return Prelude[">>="](Data_Either.bindEither)(Data_Foreign_Index["!"](__dict_Index_145)(value)(prop))(readWith(__dict_IsForeign_144)(Data_Foreign_Index.errorAt(__dict_Index_145)(prop)));
                };
            };
        };
    };
    var undefinedIsForeign = function (__dict_IsForeign_146) {
        return new IsForeign(Data_Foreign_Undefined.readUndefined(read(__dict_IsForeign_146)));
    };
    var numberIsForeign = new IsForeign(Data_Foreign.readNumber);
    var nullOrUndefinedIsForeign = function (__dict_IsForeign_147) {
        return new IsForeign(Data_Foreign_NullOrUndefined.readNullOrUndefined(read(__dict_IsForeign_147)));
    };
    var nullIsForeign = function (__dict_IsForeign_148) {
        return new IsForeign(Data_Foreign_Null.readNull(read(__dict_IsForeign_148)));
    };
    var foreignIsForeign = new IsForeign(function (f) {
        return Prelude["return"](Data_Either.monadEither)(f);
    });
    var booleanIsForeign = new IsForeign(Data_Foreign.readBoolean);
    var arrayIsForeign = function (__dict_IsForeign_149) {
        return new IsForeign(function (value) {
            var readElement = function (i) {
                return function (value_1) {
                    return readWith(__dict_IsForeign_149)(Data_Foreign.ErrorAtIndex.create(i))(value_1);
                };
            };
            var readElements = function (arr) {
                return Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Data_Array.zipWith(readElement)(Data_Array.range(0)(Data_Array.length(arr)))(arr));
            };
            return Prelude[">>="](Data_Either.bindEither)(Data_Foreign.readArray(value))(readElements);
        });
    };
    return {
        IsForeign: IsForeign, 
        arrayIsForeign: arrayIsForeign, 
        booleanIsForeign: booleanIsForeign, 
        foreignIsForeign: foreignIsForeign, 
        nullIsForeign: nullIsForeign, 
        nullOrUndefinedIsForeign: nullOrUndefinedIsForeign, 
        numberIsForeign: numberIsForeign, 
        read: read, 
        readJSON: readJSON, 
        readProp: readProp, 
        readWith: readWith, 
        stringIsForeign: stringIsForeign, 
        undefinedIsForeign: undefinedIsForeign
    };
})();
var PS = PS || {};
PS.Graphics_Canvas = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Data_Maybe = PS.Data_Maybe;
    function AlignLeft() {

    };
    AlignLeft.value = new AlignLeft();
    function AlignRight() {

    };
    AlignRight.value = new AlignRight();
    function AlignCenter() {

    };
    AlignCenter.value = new AlignCenter();
    function AlignStart() {

    };
    AlignStart.value = new AlignStart();
    function AlignEnd() {

    };
    AlignEnd.value = new AlignEnd();
    function Round() {

    };
    Round.value = new Round();
    function Square() {

    };
    Square.value = new Square();
    function Butt() {

    };
    Butt.value = new Butt();
    function SourceOver() {

    };
    SourceOver.value = new SourceOver();
    function SourceIn() {

    };
    SourceIn.value = new SourceIn();
    function SourceOut() {

    };
    SourceOut.value = new SourceOut();
    function SourceAtop() {

    };
    SourceAtop.value = new SourceAtop();
    function DestinationOver() {

    };
    DestinationOver.value = new DestinationOver();
    function DestinationIn() {

    };
    DestinationIn.value = new DestinationIn();
    function DestinationOut() {

    };
    DestinationOut.value = new DestinationOut();
    function DestinationAtop() {

    };
    DestinationAtop.value = new DestinationAtop();
    function Lighter() {

    };
    Lighter.value = new Lighter();
    function Copy() {

    };
    Copy.value = new Copy();
    function Xor() {

    };
    Xor.value = new Xor();
    function getCanvasElementByIdImpl(id, Just, Nothing) {
    return function() {
      var el = document.getElementById(id);
      if (el && el instanceof HTMLCanvasElement) {
        return Just(el);
      } else {
        return Nothing;
      }
    };
  };
    function getContext2D(c) {  return function() {    return c.getContext('2d');  };};
    function getCanvasWidth(canvas){  return function(){    return canvas.width;  };};;
    function getCanvasHeight(canvas){  return function(){    return canvas.height;  };};;
    function setCanvasWidth(width){   return function(canvas){      return function(){        canvas.width = width;        return canvas;      };    };};;
    function setCanvasHeight(height){   return function(canvas){      return function(){         canvas.height = height;         return canvas;       };    };};;
    function canvasToDataURL(canvas) {   return function(){     return canvas.toDataURL();   };};;
    function setLineWidth(width) {  return function(ctx) {    return function() {      ctx.lineWidth = width;      return ctx;    };  };};
    function setFillStyle(style) {  return function(ctx) {    return function() {      ctx.fillStyle = style;      return ctx;    };  };};
    function setStrokeStyle(style) {  return function(ctx) {    return function() {      ctx.strokeStyle = style;      return ctx;    };  };};
    function setShadowColor(color) {  return function(ctx) {    return function() {      ctx.shadowColor = color;      return ctx;    };  };};
    function setShadowBlur(blur) {  return function(ctx) {    return function() {      ctx.shadowBlur = blur;      return ctx;    };  };};
    function setShadowOffsetX(offsetX) {  return function(ctx) {    return function() {      ctx.shadowOffsetX = offsetX;      return ctx;    };  };};
    function setShadowOffsetY(offsetY) {  return function(ctx) {    return function() {      ctx.shadowOffsetY = offsetY;      return ctx;    };  };};
    function setLineCapImpl(cap){  return function(ctx) {    return function() {      ctx.lineCap = cap;      return ctx;    };  };};
    function setGlobalCompositeOperationImpl(ctx) {  return function(op) {    return function() {      ctx.globalCompositeOperation = op;      return ctx;    };  };};
    function setGlobalAlpha(ctx) {  return function(alpha) {    return function() {      ctx.setGlobalAlpha = alpha;      return ctx;    };  };};
    function beginPath(ctx) {  return function() {    ctx.beginPath();    return ctx;  };};
    function stroke(ctx) {  return function() {    ctx.stroke();    return ctx;  };};
    function fill(ctx) {  return function() {    ctx.fill();    return ctx;  };};
    function clip(ctx) {  return function() {    ctx.clip();    return ctx;  };};
    function lineTo(ctx) {  return function(x) {    return function(y) {      return function() {        ctx.lineTo(x, y);        return ctx;      };    };  };};
    function moveTo(ctx) {  return function(x) {    return function(y) {      return function() {        ctx.moveTo(x, y);        return ctx;      };    };  };};
    function closePath(ctx) {  return function() {    ctx.closePath();    return ctx;  };};
    function arc(ctx) {  return function(a) {    return function() {      ctx.arc(a.x, a.y, a.r, a.start, a.end);      return ctx;    };  };};
    function rect(ctx) {  return function(r) {    return function() {      ctx.rect(r.x, r.y, r.w, r.h);      return ctx;    };  };};
    function fillRect(ctx) {  return function(r) {    return function() {      ctx.fillRect(r.x, r.y, r.w, r.h);      return ctx;    };  };};
    function strokeRect(ctx) {  return function(r) {    return function() {      ctx.strokeRect(r.x, r.y, r.w, r.h);      return ctx;    };  };};
    function clearRect(ctx) {  return function(r) {    return function() {      ctx.clearRect(r.x, r.y, r.w, r.h);      return ctx;    };  };};
    function scale(t) {  return function(ctx) {    return function() {      ctx.scale(t.scaleX, t.scaleY);      return ctx;    };  };};
    function rotate(angle) {  return function(ctx) {    return function() {      ctx.rotate(angle);      return ctx;    };  };};
    function translate(t) {  return function(ctx) {    return function() {      ctx.translate(t.translateX, t.translateY);      return ctx;    };  };};
    function transform(t) {  return function(ctx) {    return function() {      ctx.transform(t.m11, t.m12, t.m21, t.m22, t.m31, t.m32);      return ctx;    };  };};
    function textAlign(ctx) {
      return function() {
        return unsafeParseTextAlign(ctx.textAlign);
      }
  };
    function setTextAlignImpl(ctx) {
    return function(textAlign) {
      return function() {
        ctx.textAlign = textAlign;
        return ctx;
      }
    }
  };
    function font(ctx) {  return function() {    return ctx.font;  };};
    function setFont(fontspec) {  return function(ctx) {    return function() {      ctx.font = fontspec;      return ctx;    };  };};
    function fillText(ctx) {  return function(text) {    return function(x) {      return function(y) {        return function() {          ctx.fillText(text, x, y);          return ctx;        };      };    };  };};
    function strokeText(ctx) {  return function(text) {    return function(x) {      return function(y) {        return function() {          ctx.strokeText(text, x, y);          return ctx;        };      };    };  };};
    function measureText(ctx) {  return function(text) {    return function() {      return ctx.measureText(text);    };  };};
    function save(ctx) {  return function() {    ctx.save();    return ctx;  };};
    function restore(ctx) {  return function() {    ctx.restore();    return ctx;  };};
    function getImageData(ctx) {  return function(x) {    return function(y) {      return function(w) {        return function(h) {          return function() { return ctx.getImageData(x, y, w, h); };        };      };    };  };};
    function putImageDataFull(ctx) {  return function(image_data) {    return function(x) {      return function(y) {        return function(dx) {          return function(dy) {            return function(dw) {              return function(dh) {                return function() {                  ctx.putImageData(image_data, x, y, dx, dy, dw, dh);                  return ctx;                };              };            };          };        };      };    };  };};
    function putImageData(ctx) {  return function(image_data) {    return function(x) {      return function(y) {        return function() {          ctx.putImageData(image_data, x, y);          return ctx;        };      };    };  };};
    function createImageData(ctx) {  return function(sw) {    return function(sh) {      return function() {        return ctx.createImageData(sw, sh);      };    };  };};
    function createImageDataCopy(ctx) {  return function(image_data) {    return function() {      return ctx.createImageData(image_data);    };  };};
    function getImageDataWidth(image_data) {  return function() {    return image_data.width;  };};
    function getImageDataHeight(image_data) {  return function() {    return image_data.height;  };};
    function getImageDataPixelArray(image_data) {  return function() {    return image_data.data;  };};
    var withContext = function (ctx) {
        return function (action) {
            return function __do() {
                save(ctx)();
                var _9 = action();
                restore(ctx)();
                return _9;
            };
        };
    };
    var unsafeParseTextAlign = function (_274) {
        if (_274 === "left") {
            return AlignLeft.value;
        };
        if (_274 === "right") {
            return AlignRight.value;
        };
        if (_274 === "center") {
            return AlignCenter.value;
        };
        if (_274 === "start") {
            return AlignStart.value;
        };
        if (_274 === "end") {
            return AlignEnd.value;
        };
        throw new Error("Failed pattern match");
    };
    var strokePath = function (ctx) {
        return function (path) {
            return function __do() {
                beginPath(ctx)();
                var _7 = path();
                stroke(ctx)();
                return _7;
            };
        };
    };
    var showTextAlign = new Prelude.Show(function (_276) {
        if (_276 instanceof AlignLeft) {
            return "left";
        };
        if (_276 instanceof AlignRight) {
            return "right";
        };
        if (_276 instanceof AlignCenter) {
            return "center";
        };
        if (_276 instanceof AlignStart) {
            return "start";
        };
        if (_276 instanceof AlignEnd) {
            return "end";
        };
        throw new Error("Failed pattern match");
    });
    var showComposite = new Prelude.Show(function (_275) {
        if (_275 instanceof SourceOver) {
            return "source-over";
        };
        if (_275 instanceof SourceIn) {
            return "source-in";
        };
        if (_275 instanceof SourceOut) {
            return "source-out";
        };
        if (_275 instanceof SourceAtop) {
            return "source-atop";
        };
        if (_275 instanceof DestinationOver) {
            return "destination-over";
        };
        if (_275 instanceof DestinationIn) {
            return "destination-in";
        };
        if (_275 instanceof DestinationOut) {
            return "destination-out";
        };
        if (_275 instanceof DestinationAtop) {
            return "destination-atop";
        };
        if (_275 instanceof Lighter) {
            return "lighter";
        };
        if (_275 instanceof Copy) {
            return "copy";
        };
        if (_275 instanceof Xor) {
            return "xor";
        };
        throw new Error("Failed pattern match");
    });
    var setTextAlign = function (ctx) {
        return function (textAlign_1) {
            return setTextAlignImpl(ctx)(Prelude.show(showTextAlign)(textAlign_1));
        };
    };
    var setLineCap = function (_273) {
        if (_273 instanceof Round) {
            return setLineCapImpl("round");
        };
        if (_273 instanceof Square) {
            return setLineCapImpl("square");
        };
        if (_273 instanceof Butt) {
            return setLineCapImpl("butt");
        };
        throw new Error("Failed pattern match");
    };
    var setGlobalCompositeOperation = function (ctx) {
        return function (composite) {
            return setGlobalCompositeOperationImpl(ctx)(Prelude.show(showComposite)(composite));
        };
    };
    var setCanvasDimensions = function (d) {
        return function (ce) {
            return Prelude[">>="](Control_Monad_Eff.bindEff)(setCanvasHeight(d.height)(ce))(setCanvasWidth(d.width));
        };
    };
    var getCanvasElementById = function (elId) {
        return getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
    };
    var getCanvasDimensions = function (ce) {
        return function __do() {
            var _6 = getCanvasWidth(ce)();
            var _5 = getCanvasHeight(ce)();
            return {
                width: _6, 
                height: _5
            };
        };
    };
    var fillPath = function (ctx) {
        return function (path) {
            return function __do() {
                beginPath(ctx)();
                var _8 = path();
                fill(ctx)();
                return _8;
            };
        };
    };
    return {
        AlignCenter: AlignCenter, 
        AlignEnd: AlignEnd, 
        AlignLeft: AlignLeft, 
        AlignRight: AlignRight, 
        AlignStart: AlignStart, 
        Butt: Butt, 
        Copy: Copy, 
        DestinationAtop: DestinationAtop, 
        DestinationIn: DestinationIn, 
        DestinationOut: DestinationOut, 
        DestinationOver: DestinationOver, 
        Lighter: Lighter, 
        Round: Round, 
        SourceAtop: SourceAtop, 
        SourceIn: SourceIn, 
        SourceOut: SourceOut, 
        SourceOver: SourceOver, 
        Square: Square, 
        Xor: Xor, 
        arc: arc, 
        beginPath: beginPath, 
        canvasToDataURL: canvasToDataURL, 
        clearRect: clearRect, 
        clip: clip, 
        closePath: closePath, 
        createImageData: createImageData, 
        createImageDataCopy: createImageDataCopy, 
        fill: fill, 
        fillPath: fillPath, 
        fillRect: fillRect, 
        fillText: fillText, 
        font: font, 
        getCanvasDimensions: getCanvasDimensions, 
        getCanvasElementById: getCanvasElementById, 
        getCanvasHeight: getCanvasHeight, 
        getCanvasWidth: getCanvasWidth, 
        getContext2D: getContext2D, 
        getImageData: getImageData, 
        getImageDataHeight: getImageDataHeight, 
        getImageDataPixelArray: getImageDataPixelArray, 
        getImageDataWidth: getImageDataWidth, 
        lineTo: lineTo, 
        measureText: measureText, 
        moveTo: moveTo, 
        putImageData: putImageData, 
        putImageDataFull: putImageDataFull, 
        rect: rect, 
        restore: restore, 
        rotate: rotate, 
        save: save, 
        scale: scale, 
        setCanvasDimensions: setCanvasDimensions, 
        setCanvasHeight: setCanvasHeight, 
        setCanvasWidth: setCanvasWidth, 
        setFillStyle: setFillStyle, 
        setFont: setFont, 
        setGlobalAlpha: setGlobalAlpha, 
        setGlobalCompositeOperation: setGlobalCompositeOperation, 
        setLineCap: setLineCap, 
        setLineWidth: setLineWidth, 
        setShadowBlur: setShadowBlur, 
        setShadowColor: setShadowColor, 
        setShadowOffsetX: setShadowOffsetX, 
        setShadowOffsetY: setShadowOffsetY, 
        setStrokeStyle: setStrokeStyle, 
        setTextAlign: setTextAlign, 
        showComposite: showComposite, 
        showTextAlign: showTextAlign, 
        stroke: stroke, 
        strokePath: strokePath, 
        strokeRect: strokeRect, 
        strokeText: strokeText, 
        textAlign: textAlign, 
        transform: transform, 
        translate: translate, 
        withContext: withContext
    };
})();
var PS = PS || {};
PS.ChartJs = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
  function newChart (ctx) {
    return function () {
      return new Chart(ctx);
    }
  }
  ;
    
  function lineChart (chart) {
    return function (data) {
      return function (config) {
        return function () {
          var allConf = {};
          for ( var a in config.global ) { allConf[a] = config.global[a] }
          for ( var a in config ) {
            if ( a !== "global" ) {
              allConf[a] = config[a];
            }
          }
          return chart.Line(data,allConf);
        }
      }
    }
  }
  ;
    
  function barChart (chart) {
    return function (data) {
      return function (config) {
        return function () {
          var allConf = {};
          for ( var a in config.global ) { allConf[a] = config.global[a] }
          for ( var a in config ) {
            if ( a !== "global" ) {
              allConf[a] = config[a];
            }
          }
          return chart.Bar(data,allConf);
        }
      }
    }
  }
  ;
    
  function radarChart (chart) {
    return function (data) {
      return function (config) {
        return function () {
          var allConf = {};
          for ( var a in config.global ) { allConf[a] = config.global[a] }
          for ( var a in config ) {
            if ( a !== "global" ) {
              allConf[a] = config[a];
            }
          }
          return chart.Radar(data,allConf);
        }
      }
    }
  }
  ;
    
  function polarAreaChart (chart) {
    return function (data) {
      return function (config) {
        return function () {
          var allConf = {};
          for ( var a in config.global ) { allConf[a] = config.global[a] }
          for ( var a in config ) {
            if ( a !== "global" ) {
              allConf[a] = config[a];
            }
          }
          return chart.PolarArea(data,allConf);
        }
      }
    }
  }
  ;
    
  function doughnutChart (chart) {
    return function (data) {
      return function (config) {
        return function () {
          var allConf = {};
          for ( var a in config.global ) { allConf[a] = config.global[a] }
          for ( var a in config ) {
            if ( a !== "global" ) {
              allConf[a] = config[a];
            }
          }
          return chart.Doughnut(data,allConf);
        }
      }
    }
  }
  ;
    
  function pieChart (chart) {
    return function (data) {
      return function (config) {
        return function () {
          var allConf = {};
          for ( var a in config.global ) { allConf[a] = config.global[a] }
          for ( var a in config ) {
            if ( a !== "global" ) {
              allConf[a] = config[a];
            }
          }
          return chart.Pie(data,allConf);
        }
      }
    }
  }
  ;
    
  function generateLegend(chartType) {
    return function () {
      return chartType.generateLegend();
    }
  }
  ;
    var responsiveChartConfig = function (a) {
        var _827 = {};
        for (var _828 in a) {
            if (a.hasOwnProperty(_828)) {
                _827[_828] = a[_828];
            };
        };
        _827.global = (function () {
            var _825 = {};
            for (var _826 in a.global) {
                if (a.global.hasOwnProperty(_826)) {
                    _825[_826] = a.global[_826];
                };
            };
            _825.responsive = true;
            return _825;
        })();
        return _827;
    };
    var defGlobalChartConfig = {
        animation: true, 
        animationSteps: 60, 
        animationEasing: "easeOutQuart", 
        showScale: true, 
        scaleOverride: false, 
        scaleSteps: Data_Maybe.Nothing.value, 
        scaleStepWidth: Data_Maybe.Nothing.value, 
        scaleStartValue: Data_Maybe.Nothing.value, 
        scaleLineColor: "rgba(0,0,0,.1)", 
        scaleLineWidth: 1, 
        scaleShowLabels: true, 
        scaleLabel: "<%=value%>", 
        scaleIntegersOnly: true, 
        scaleBeginAtZero: false, 
        scaleFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif", 
        scaleFontSize: 12, 
        scaleFontStyle: "normal", 
        scaleFontColor: "#666", 
        responsive: false, 
        maintainAspectRatio: true, 
        showTooltips: true, 
        customTooltips: false, 
        tooltipEvents: [ "mousemove", "touchstart", "touchmove" ], 
        tooltipFillColor: "rgba(0,0,0,0.8)", 
        tooltipFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif", 
        tooltipFontSize: 14, 
        tooltipFontStyle: "normal", 
        tooltipFontColor: "#fff", 
        tooltipTitleFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif", 
        tooltipTitleFontSize: 14, 
        tooltipTitleFontStyle: "bold", 
        tooltipTitleFontColor: "#fff", 
        tooltipYPadding: 6, 
        tooltipXPadding: 6, 
        tooltipCaretSize: 8, 
        tooltipCornerRadius: 6, 
        tooltipXOffset: 10, 
        tooltipTemplate: "<%if (label){%><%=label%>: <%}%><%= value %>", 
        multiTooltipTemplate: "<%= value %>", 
        onAnimationProgress: Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit), 
        onAnimationComplete: Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit)
    };
    var defLineChartConfig = {
        global: defGlobalChartConfig, 
        scaleShowGridLines: true, 
        scaleGridLineColor: "rgba(0,0,0,.05)", 
        scaleGridLineWidth: 1, 
        scaleShowHorizontalLines: true, 
        scaleShowVerticalLines: true, 
        bezierCurve: true, 
        bezierCurveTension: 0.4, 
        pointDot: true, 
        pointDotRadius: 4, 
        pointDotStrokeWidth: 1, 
        pointHitDetectionRadius: 20, 
        datasetStroke: true, 
        datasetStrokeWidth: 2, 
        datasetFill: true, 
        legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].strokeColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"
    };
    var defPieDoughnutChartConfig = function (cutout) {
        return {
            global: (function () {
                var _829 = {};
                for (var _830 in defGlobalChartConfig) {
                    if (defGlobalChartConfig.hasOwnProperty(_830)) {
                        _829[_830] = defGlobalChartConfig[_830];
                    };
                };
                _829.animationSteps = 100;
                _829.animationEasing = "easeOutBounce";
                return _829;
            })(), 
            segmentShowStroke: true, 
            segmentStrokeColor: "#fff", 
            segmentStrokeWidth: 2, 
            percentageInnerCutout: cutout, 
            animateRotate: true, 
            animateScale: false, 
            legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<segments.length; i++){%><li><span style=\"background-color:<%=segments[i].fillColor%>\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>"
        };
    };
    var defPieChartConfig = defPieDoughnutChartConfig(0);
    var defPolarAreaChartConfig = {
        global: (function () {
            var _831 = {};
            for (var _832 in defGlobalChartConfig) {
                if (defGlobalChartConfig.hasOwnProperty(_832)) {
                    _831[_832] = defGlobalChartConfig[_832];
                };
            };
            _831.animationSteps = 100;
            _831.animationEasing = "easeOutBounce";
            return _831;
        })(), 
        scaleShowLabelBackdrop: true, 
        scaleBackdropColor: "rgba(255,255,255,0.75)", 
        scaleBeginAtZero: true, 
        scaleBackdropPaddingY: 2, 
        scaleBackdropPaddingX: 2, 
        scaleShowLine: true, 
        segmentShowStroke: true, 
        segmentStrokeColor: "#fff", 
        segmentStrokeWidth: 2, 
        animateRotate: true, 
        animateScale: false, 
        legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<segments.length; i++){%><li><span style=\"background-color:<%=segments[i].fillColor%>\"></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>"
    };
    var defRadarChartConfig = {
        global: defGlobalChartConfig, 
        scaleShowLine: true, 
        angleShowLineOut: true, 
        scaleShowLabels: false, 
        scaleBeginAtZero: true, 
        angleLineColor: "rgba(0,0,0,.1)", 
        angleLineWidth: 1, 
        pointLabelFontFamily: "'Arial'", 
        pointLabelFontStyle: "normal", 
        pointLabelFontSize: 10, 
        pointLabelFontColor: "#666", 
        pointDot: true, 
        pointDotRadius: 3, 
        pointDotStrokeWidth: 1, 
        pointHitDetectionRadius: 20, 
        datasetStroke: true, 
        datasetStrokeWidth: 2, 
        datasetFill: true, 
        legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].strokeColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"
    };
    var defDoughnutChartConfig = defPieDoughnutChartConfig(50);
    var defBarChartConfig = {
        global: defGlobalChartConfig, 
        scaleBeginAtZero: true, 
        scaleShowGridLines: true, 
        scaleGridLineColor: "rgba(0,0,0,.05)", 
        scaleGridLineWidth: 1, 
        scaleShowHorizontalLines: true, 
        scaleShowVerticalLines: true, 
        barShowStroke: true, 
        barStrokeWidth: 2, 
        barValueSpacing: 5, 
        barDatasetSpacing: 1, 
        legendTemplate: "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].strokeColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"
    };
    return {
        barChart: barChart, 
        defBarChartConfig: defBarChartConfig, 
        defDoughnutChartConfig: defDoughnutChartConfig, 
        defGlobalChartConfig: defGlobalChartConfig, 
        defLineChartConfig: defLineChartConfig, 
        defPieChartConfig: defPieChartConfig, 
        defPolarAreaChartConfig: defPolarAreaChartConfig, 
        defRadarChartConfig: defRadarChartConfig, 
        doughnutChart: doughnutChart, 
        generateLegend: generateLegend, 
        lineChart: lineChart, 
        newChart: newChart, 
        pieChart: pieChart, 
        polarAreaChart: polarAreaChart, 
        radarChart: radarChart, 
        responsiveChartConfig: responsiveChartConfig
    };
})();
var PS = PS || {};
PS.Example = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_JQuery = PS.Control_Monad_JQuery;
    var ChartJs = PS.ChartJs;
    var Graphics_Canvas = PS.Graphics_Canvas;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Monad_Eff_Exception = PS.Control_Monad_Eff_Exception;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var pieDoughnutData = [ {
        value: 300, 
        color: "#F7464A", 
        highlight: "#FF5A5E", 
        label: "Red"
    }, {
        value: 50, 
        color: "#46BFBD", 
        highlight: "#5AD3D1", 
        label: "Green"
    }, {
        value: 100, 
        color: "#FDB45C", 
        highlight: "#FFC870", 
        label: "Yellow"
    }, {
        value: 40, 
        color: "#949FB1", 
        highlight: "#A8B3C5", 
        label: "Grey"
    }, {
        value: 120, 
        color: "#4D5360", 
        highlight: "#616774", 
        label: "Dark Grey"
    } ];
    var initRadar = function (c) {
        var radarData = {
            labels: [ "Eating", "Drinking", "Sleeping", "Designing", "Coding", "Cycling", "Running" ], 
            datasets: [ {
                label: "My First dataset", 
                fillColor: "rgba(220,220,220,0.2)", 
                strokeColor: "rgba(220,220,220,1)", 
                pointColor: "rgba(220,220,220,1)", 
                pointStrokeColor: "#fff", 
                pointHighlightFill: "#fff", 
                pointHighlightStroke: "rgba(220,220,220,1)", 
                data: [ 65, 59, 90, 81, 56, 55, 40 ]
            }, {
                label: "My Second dataset", 
                fillColor: "rgba(151,187,205,0.2)", 
                strokeColor: "rgba(151,187,205,1)", 
                pointColor: "rgba(151,187,205,1)", 
                pointStrokeColor: "#fff", 
                pointHighlightFill: "#fff", 
                pointHighlightStroke: "rgba(151,187,205,1)", 
                data: [ 28, 48, 40, 19, 96, 27, 100 ]
            } ]
        };
        return ChartJs.radarChart(c)(radarData)(ChartJs.responsiveChartConfig(ChartJs.defRadarChartConfig));
    };
    var initPolarArea = function (c) {
        return ChartJs.polarAreaChart(c)(pieDoughnutData)(ChartJs.responsiveChartConfig(ChartJs.defPolarAreaChartConfig));
    };
    var initPie = function (c) {
        return ChartJs.pieChart(c)(pieDoughnutData)(ChartJs.responsiveChartConfig(ChartJs.defPieChartConfig));
    };
    var initLine = function (c) {
        var lineData = {
            labels: [ "January", "February", "March", "April", "May", "June", "July" ], 
            datasets: [ {
                label: "My First dataset", 
                fillColor: "rgba(220,220,220,0.2)", 
                strokeColor: "rgba(220,220,220,1)", 
                pointColor: "rgba(220,220,220,1)", 
                pointStrokeColor: "#fff", 
                pointHighlightFill: "#fff", 
                pointHighlightStroke: "rgba(220,220,220,1)", 
                data: [ 40, 25, 58, 88, 5, 99, 63 ]
            }, {
                label: "My Second dataset", 
                fillColor: "rgba(151,187,205,0.2)", 
                strokeColor: "rgba(151,187,205,1)", 
                pointColor: "rgba(151,187,205,1)", 
                pointStrokeColor: "#fff", 
                pointHighlightFill: "#fff", 
                pointHighlightStroke: "rgba(151,187,205,1)", 
                data: [ 89, 86, 20, 64, 39, 61, 30 ]
            } ]
        };
        return ChartJs.lineChart(c)(lineData)(ChartJs.responsiveChartConfig(ChartJs.defLineChartConfig));
    };
    var initDoughnut = function (c) {
        return ChartJs.doughnutChart(c)(pieDoughnutData)(ChartJs.responsiveChartConfig(ChartJs.defDoughnutChartConfig));
    };
    var initBar = function (c) {
        var barData = {
            labels: [ "January", "February", "March", "April", "May", "June", "July" ], 
            datasets: [ {
                fillColor: "rgba(220,220,220,0.5)", 
                strokeColor: "rgba(220,220,220,0.8)", 
                highlightFill: "rgba(220,220,220,0.75)", 
                highlightStroke: "rgba(220,220,220,1)", 
                data: [ 70, 92, 89, 79, 34, 64, 1 ]
            }, {
                fillColor: "rgba(151,187,205,0.5)", 
                strokeColor: "rgba(151,187,205,0.8)", 
                highlightFill: "rgba(151,187,205,0.75)", 
                highlightStroke: "rgba(151,187,205,1)", 
                data: [ 24, 8, 62, 48, 84, 45, 4 ]
            } ]
        };
        return ChartJs.barChart(c)(barData)(ChartJs.responsiveChartConfig(ChartJs.defBarChartConfig));
    };
    var die = Prelude[">>>"](Prelude.semigroupoidArr)(Control_Monad_Eff_Exception.error)(Control_Monad_Eff_Exception.throwException);
    var initGraph = function (name) {
        return function (f) {
            var lId = name + "-legend";
            var cId = name + "-canvas";
            return Prelude["void"](Control_Monad_Eff.functorEff)(function __do() {
                var _16 = Graphics_Canvas.getCanvasElementById(cId)();
                var _15 = Data_Maybe.maybe(die("Could not find canvas: " + cId))(Prelude.pure(Control_Monad_Eff.applicativeEff))(_16)();
                var _14 = Graphics_Canvas.getContext2D(_15)();
                var _13 = ChartJs.newChart(_14)();
                var _12 = f(_13)();
                var _11 = ChartJs.generateLegend(_12)();
                var _10 = Control_Monad_JQuery.select("#" + lId)();
                return Control_Monad_JQuery.appendText(_11)(_10)();
            });
        };
    };
    var initGraphs = Prelude["<<<"](Prelude.semigroupoidArr)(Prelude["void"](Control_Monad_Eff.functorEff))(Control_Monad_JQuery.ready)(function __do() {
        initGraph("line")(initLine)();
        initGraph("bar")(initBar)();
        initGraph("radar")(initRadar)();
        initGraph("polar-area")(initPolarArea)();
        initGraph("doughnut")(initDoughnut)();
        return initGraph("pie")(initPie)();
    });
    return {
        die: die, 
        initBar: initBar, 
        initDoughnut: initDoughnut, 
        initGraph: initGraph, 
        initGraphs: initGraphs, 
        initLine: initLine, 
        initPie: initPie, 
        initPolarArea: initPolarArea, 
        initRadar: initRadar, 
        pieDoughnutData: pieDoughnutData
    };
})();

